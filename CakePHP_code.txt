-------------------------------------------------------------------------------- class--------------------------------------------------------------------------------appの直下にvendorというフォルダがあるのでそこにやるといいそうな。phpファイルにまとめて置く。あとは使用時にインポートするだけ。    App::import( "Vendor", "Hoge" );    $hogeClass = new Hoge();        // クラス    hoge();                         // 関数呼び出し読み込んだファイルの中身はあとは気にせず使えます。-------------------------------------------------------------------------------- sql---------------------------------------------------------------------------------- phpMyAdmin SQL Dump-- version 4.1.14-- http://www.phpmyadmin.net---- Host: 127.0.0.1-- Generation Time: 2016 年 1 朁E11 日 08:52-- サーバのバージョン： 5.6.17-- PHP Version: 5.5.12SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";SET time_zone = "+00:00";---- Database: `mydata`---- ------------------------------------------------------------ テーブルの構造 `boards`--CREATE TABLE IF NOT EXISTS `boards` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(255) NOT NULL,  `title` varchar(255) NOT NULL,  `content` text NOT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=9 ;---- テーブルのデータのダンプ `boards`--INSERT INTO `boards` (`id`, `name`, `title`, `content`) VALUES(1, 'tuyano', 'test', 'this is test.'),(2, 'hanako', 'hello', 'hello!'),(3, '', '', ''),(4, 'aaa', '', ''),(5, '', '', ''),(6, '', '', ''),(7, 'asdfgh', 'asdfghjk', 'asdfghj'),(8, 'DOCUMENT', 'FUTURE & HISTOKRY', 'aehtsrdfyugih\r\n');--------------------------------------------------------------------------------secsion 2--------------------------------------------------------------------------------［リスト2-1］<!DOCTYPE html><html lang="ja"><head>  <meta http-equiv="content-type"     content="text/html; charset=UTF-8">    <title>Hello</title></head>  <body>    <p>This is Test Page.</p>    <p>これは、テストページです。</p>  </body></html>［リスト2-2］<?phpclass HelloController extends AppController {  public $name = 'Hello';  public $uses = null;  public $autoRender = false;      public function index(){    echo "hello world!";  }}?>[リスト2-3]<?phpclass HelloController extends AppController {  public function index(){    $this->name = 'Hello';    $this->uses = null;    $this->autoRender = false;    echo "hello world!";  }}?>[リスト2-4]<?phpclass HelloController extends AppController {  $name = 'Hello'; // titleになる  $uses = null;	// ライブラリの読み込み  $autoRender = false; // オートレンダーOFF    public function index(){    $this->name = 'Hello';    $this->uses = null;    $this->autoRender = false;    echo "hello world!";  }}?>［リスト2-5］<?phpclass HelloController extends AppController {  public $name = 'Hello';  public $uses = null;    public $autoRender = false;       public function index(){    echo "hello world!";  }    public function other(){    echo "これは、index以外の表示です。";  }}?>[リスト2-6]<?phpclass HelloController extends AppController {  public $name = 'Hello';  public $uses = null;    public $autoRender = false;   public function index(){    $this->setAction("other"); // フォワード 内部で移動、URL変わらない、controller, actionで指定    // $this->redirect("./other"); // リダイレクト ページを移動 URLで指定  }    public function other(){    echo "これは、index以外の表示です。";  }}?>［リスト2-7］<!DOCTYPE html><html lang="ja"><head>  <meta http-equiv="content-type" content="text/html; charset=UTF-8">  <title>Hello Page</title></head>  <body>    <h1>サンプル見出し</h1>    <p>こんにちは！ これは、CakePHPのサンプルです。</p>  </body></html>［リスト2-8］<?phpclass HelloController extends AppController {  public $name = 'Hello';  public $uses = null;  public $autoLayout = false; // オートレイアウトOFF  public $autoRender = true;      public function index(){}}?>［リスト2-9］<?php  echo date('Y/m/d',time());?>［リスト2-10］<h1>サンプル見出し</h1><p>こんにちは！ これは、CakePHPのサンプルです。</p><br/><br/><?php  echo date('Y/m/d',time());?>［リスト2-11］<!DOCTYPE html><html lang="ja"><head>  <meta http-equiv="content-type" content="text/html; charset=UTF-8">  <title>Hello Page</title></head>  <body>    <h1>サンプル見出し</h1>    <p>これは、index以外の表示です。</p>  </body></html>［リスト2-12］<?phpclass HelloController extends AppController {  public $name = 'Hello';  public $uses = null;  public $autoLayout; // オートレイアウト宣言  public $autoRender; // オートレンダー宣言      public function index(){    $this->autoLayout = true; // trueを代入    $this->autoRender = true; // trueを代入  }    public function other(){    $this->autoLayout = false; // falseを代入    $this->autoRender = true; // trueを代入  }}?>［リスト2-13］body {  background: #FFAAAA;  color: #660000;  margin: 0;}#header{  font-size: 14pt;  font-weight: bold;}#content{  background: #FFEEEE;  color: #990000;  padding: 10px 20px 40px 20px;}#footer{  text-align: right;}［リスト2-14］<!DOCTYPE html><html lang="ja"><head>  <?php echo $this->Html->charset(); ?>  <title>    <?php echo $title_for_layout; ?> <!-- 「$title_for_layout」レイアウトの名前の表示 -->  </title>  <?php  echo $this->Html->css('cake.hello');  echo $scripts_for_layout; <!-- 「$scripts_for_layout」 jsの表示 -->  ?></head><body>  <div id="container">    <div id="header">** Header **</div>    <div id="content">      <?php echo $content_for_layout; ?>  <!-- 「$content_for_layout」 viewファイルの表示 -->    </div>    <div id="footer">** this is test. **</div>  </div></body></html>［リスト2-15］<?phpclass HelloController extends AppController {  public $name = 'Hello';  public $uses = null;  public $layout = "Hello"; // オリジナルのレイアウト -> View/Layouts/hello.etp    public function index(){}}?>[リスト2-16]body {  background: #AAFFAA;  color: #006600;  margin: 0;}#header{  font-size: 14pt;  font-weight: bold;}#content{  background: #EEFFEE;  color: #009900;  padding: 10px 20px 40px 20px;}#footer{  text-align: right;}h1 {  font-size:12pt;}[リスト2-17]<?phpclass HelloController extends AppController {  public $name = 'Hello';  public $uses = null;  public function index(){    $this->theme = "helloTheme"; // View/themed/helloTheme にホルダを作る、中身はwebrootと同じ作り。  }}?>［リスト2-18］――index.ctp<h1>サンプル見出し</h1><p>フォームの送信</p><br/><br/><form method="get" action="./sendForm">  <input type="text" name="text1" />  <input type="submit" /></form>［リスト2-19］――send_form.ctp<h1>送信結果</h1><p><?php echo $result; ?></p>［リスト2-20］――HelloController.php<?phpclass HelloController extends AppController {  public $name = 'Hello';  public $uses = null;  public $layout = "hello";  public function index(){}  public function sendForm(){    $str = $this->request->query['text1'];    $result = "";    if ($str != ""){      $result = "you type: " . $str;    } else {      $result = "empty.";    }    $this->set("result",$result);  }}?>［リスト2-21］public function sendForm(){  $str = $this->request->query['text1'];  $result = "";  if ($str != ""){    $result = "you type: " . $str;  } else {    $result = "empty.";  }  $this->set("result",htmlspecialchars($result));}［リスト2-22］public function sendForm(){  App::uses('Sanitize', 'Utility'); //sprittagみたいな奴  $str = $this->request->query['text1'];  $result = "";  if ($str != ""){    $result = "you type: " . $str;  } else {    $result = "empty.";  }  $this->set("result",Sanitize::stripAll($result));}［リスト2-23］<h1>サンプル見出し</h1><p>フォームの送信</p><br/><form method="get" action="./sendForm">  <input type="checkbox" name="check1" />チェック<br />  <input type="radio" name="radio1" value="No.1" />ラジオ1<br />  <input type="radio" name="radio1" value="No.2" />ラジオ2<br />  <select name="select1">    <option value="Windows">Windows</>    <option value="Linux">Linux</>    <option value="MacOSX">MacOSX</>  </select>  <input type="submit" /></form>［リスト2-24］public function sendForm(){  App::uses('Sanitize','Utility');  $result = "※送信された情報<br/>";  foreach($this->request->query as $key => $val){    $result .= $key . " => " . $val . "<br/>";  }  $this->set("result",Sanitize::stripAll($result));}[リスト2-25]――index.ctp<h1>サンプル見出し</h1><p>フォームの送信</p><br/><form method="post" action="./sendForm">  <input type="text" name="text1" />  <input type="submit" /></form>[リスト2-26]――send_form.ctp<h1>送信結果</h1><p><?php echo $result; ?></p>［リスト2-27］public function sendForm(){  App::uses('Sanitize', 'Utility');  $str = $this->request->data('text1');  $result = "";  if ($str != ""){    $result = "you type: " . $str;  } else {    $result = "empty.";  }  $this->set("result",Sanitize::stripAll($result));}［リスト2-28］<h1>サンプル見出し</h1><p>  <?php echo $result; ?></p><br/><?php echo $this->Form->create(false,array('type'=>'post','action'=>'.')); ?>  <?php echo $this->Form->text("HelloForm.text1"); ?>  <?php echo $this->Form->submit("送信"); ?><?php echo $this->Form->end(); ?>［リスト2-29］public function index(){  App::uses('Sanitize', 'Utility');  $result = "";  if ($this->request->isPost()){    $result = "<pre>※送信された情報<br/>";    foreach($this->request->data['HelloForm'] as $key => $val){      $result .= $key . ' => ' . $val;    }    $result .= "</pre>";  } else {    $result  = "※なにか書いて送信してください。";  }  $this->set("result",Sanitize::stripScripts($result));}［リスト2-30］<form action="/cake/sample/hello/." id="Form" method="post"     accept-charset="utf-8">  <div style="display:none;">    <input type="hidden" name="_method" value="POST"/>  </div>  <input name="data[HelloForm][text1]" type="text" id="HelloFormText1"/>  <div class="submit">    <input  type="submit" value="送信"/>  </div></form>［リスト2-31］――フォームのタグ<?php echo $this->Form->create(false,array('type'=>'post','action'=>'.')); ?>  <?php echo $this->Form->checkbox("HelloForm.check1",    array('checked'=>true)); ?>checkbox<?php echo $this->Form->end("送信"); ?>［リスト2-32］――生成されるHTMLコード<form action="/cake/sample/hello/." id="Form" method="post"     accept-charset="utf-8">  <div style="display:none;">    <input type="hidden" name="_method" value="POST"/>  </div>  <input type="hidden" name="data[HelloForm][check1]"     id="HelloFormCheck1_" value="0"/>  <input type="checkbox" name="data[HelloForm][check1]"  checked="checked"     value="1" id="HelloFormCheck1"/>checkbox  <div class="submit">    <input  type="submit" value="送信"/>  </div></form>［リスト2-33］――ラベルを追加したフォーム<?=$this->Form->create(false,array('type'=>'post','action'=>'.')) ?> <?=$this->Form->checkbox("HelloForm.check1",array('checked'=>true)) ?> <?=$this->Form->label('HelloForm.check1') ?><?=$this->Form->end("送信") ?>［リスト2-34］――生成されたHTMLコード<form action="/cake/sample/hello/." id="Form" method="post"     accept-charset="utf-8">  <div style="display:none;">    <input type="hidden" name="_method" value="POST"/>  </div>  <input type="hidden" name="data[HelloForm][check1]"     id="HelloFormCheck1_" value="0"/>  <input type="checkbox" name="data[HelloForm][check1]"  checked="checked"     value="1" id="HelloFormCheck1"/>  <label for="HelloFormCheck1">Check1</label>  <div class="submit">    <input  type="submit" value="送信"/>  </div></form>［リスト2-35］――フォームのタグ<?php echo $this->Form->create(false,array('type'=>'post','action'=>'.')); ?>  <?php echo $this->Form->radio("HelloForm.radio1",      array('ウインドウズ'=>'Windows','リナックス'=>'Linux','マックOS'=>'MacOS X'),      array('legend'=>'OSを選択','value'=>'リナックス')); ?><?php echo $this->Form->end("送信"); ?>［リスト2-36］――生成されるHTML コード<form action="/cake/sample/hello/." id="Form" method="post" accept-charset="utf-8"><div style="display:none;"><input type="hidden" name="_method" value="POST"/></div><fieldset><legend>OSを選択</legend><input type="radio" name="data[HelloForm][radio1]" id="HelloFormRadio1ウインドウズ" value="ウインドウズ" /><label for="HelloFormRadio1ウインドウズ">Windows</label><input type="radio" name="data[HelloForm][radio1]" id="HelloFormRadio1リナックス" value="リナックス" checked="checked" /><label for="HelloFormRadio1リナックス">Linux</label><input type="radio" name="data[HelloForm][radio1]" id="HelloFormRadio1マックOS" value="マックOS" /><label for="HelloFormRadio1マックOS">MacOS X</label></fieldset><div class="submit"><input type="submit" value="送信"/></div></form>［リスト2-37］――フォームのタグ<?php echo $this->Form->create(false,array('type'=>'post','action'=>'.')); ?><?php echo $this->Form->select('HelloForm.select1',array('ウインドウズ'=>'Windows','リナックス'=>'Linux','マックOS'=>'MacOS X'),array('empty'=>'項目を選んでください')); ?><?php echo $this->Form->end("送信"); ?>［リスト2-38］――生成されるHTMLコード<form action="/cake/sample/hello/." id="Form" method="post"     accept-charset="utf-8">  <div style="display:none;">    <input type="hidden" name="_method" value="POST"/>  </div>  <select name="data[HelloForm][select1]" id="HelloFormSelect1">    <option value="">項目を選んでください</option>    <option value="ウインドウズ">Windows</option>    <option value="リナックス" selected="selected">Linux</option>    <option value="マックOS">MacOS X</option>  </select>  <div class="submit">    <input  type="submit" value="送信"/>  </div></form>  ［リスト2-39］<?php echo $this->Form->create(false,array('type'=>'post','action'=>'.')); ?>  <?php echo $this->Form->select('HelloForm.select1',       array('ウインドウズ'=>'Windows', 'リナックス'=>'Linux', 'マックOS'=>'MacOSX'),      array('size'=>5, 'empty'=>'項目を選んでください')); ?><?php echo $this->Form->end("送信"); ?>［リスト2-40］<?php App::uses('Sanitize', 'Utility'); ?> <!-- sprittagみたいな奴 --><h1>送信フォーム・サンプル</h1><?php echo $this->Form->create(false,array('type'=>'post','action'=>'.')); ?>  <?php echo Sanitize::stripScripts($this->Form->value('HelloForm.text1')); ?><br/>  <?php echo $this->Form->text('HelloForm.text1'); ?><br /><br/>  <?php echo Sanitize::stripScripts($this->Form->value('HelloForm.radio1')); ?><br/>  <?php echo $this->Form->radio("HelloForm.radio1",      array('男性'=>'男性','女性'=>'女性','両性'=>'両性'),      array('legend'=>'性別を選択')); ?><br />  <?php echo Sanitize::stripScripts($this->Form->value('HelloForm.select1')); ?><br/>  <?php echo $this->Form->select('HelloForm.select1',      array('未成年'=>'未成年','社会人'=>'社会人','その他'=>'その他'),      array('size'=>4,'empty'=>'※項目を選択')); ?><?php echo $this->Form->end("送信"); ?>［リスト2-41］<h1>送信フォーム・サンプル</h1><?phpecho $this->Form->create(false,array('type'=>'post','action'=>'.'));echo "<pre>";print_r($this->Form->value('HelloForm.date'));echo "</pre>";echo "<br/>";echo $this->Form->dateTime('HelloForm.date','YMD');echo $this->Form->end("送信");?>--------------------------------------------------------------------------------secsion 3--------------------------------------------------------------------------------//			find(//				'all', [//				'conditions' => ['Model.field' => $thisValue], //検索条件の配列//				'recursive' => 1, //int//				'fields' => ['Model.field1', 'DISTINCT Model.field2'], //フィールド名の配列//				'order' => ['Model.created', 'Model.field3 DESC'], //並び順を文字列または配列で指定//				'group' => ['Model.field'], //GROUP BYのフィールド//				'limit' => n, //int//				'page' => n, //int//				'offset' => n, //int//				'callbacks' => true //falseの他に'before'、'after'を指定できます//			]);第1引数:(string)all					配列を返すfirst				一行のみ返すlist				インデックス付きの配列を返す→formのセレクトに使うと便利count				整数を返すneighbors			前後の行を返すthreaded			入れ子になった配列を返します第2引数:(array)- conditions：(array)検索条件	['Model.id' => '1'],//idが1	['Model.id >' => '1'],//idが1より大きい- recursive:(int)取得範囲の設定	-1 Group のデータだけを取得します。join しません。(最速	0 Group のデータとそのドメインを取得します。	1 １つの Group とそのドメインとそれに関連した User を取得します。(defalt	2 １つの Group とそのドメインとそれに関連した User と各 User に関連した Article を取得します。- fields:(array)取得する列選択	fieldsを指定しないと全てのフィールドが取得される	DISTINCT:重複した行をまとめる- order:(array)並び順	DESC:降順	ASC :昇順- group:(array) =GROUP BY@SQL	指定したカラム名の値が同じものが同じグループとなります。	複数のカラムを指定した場合は、値の組み合わせが同じものでグループ化されます。- limit:(int)取得数制限- page:(int)取得するページ番号（limitと併用）- offset:(int)データの取得開始位置を指定- callbacks:(int)コールバックを実行するか	save前後、varidate前後等設定可能［リスト3-1］――database.phpclass DATABASE_CONFIG {  public $default = array(    'datasource' => 'Database/Mysql',    'persistent' => false,    'host' => 'localhost',    'login' => 'user',    'password' => 'password',    'database' => 'database_name',    'prefix' => '',    //'encoding' => 'utf8',  );  public $test = array(    'datasource' => 'Database/Mysql',    'persistent' => false,    'host' => 'localhost',    'login' => 'user',    'password' => 'password',    'database' => 'test_database_name',    'prefix' => '',    //'encoding' => 'utf8',  );}［リスト3-2］class DATABASE_CONFIG {  var $default = array(    'datasource' => 'Database/Sqlite',    'persistent' => false,    'host' => '',    'login' => '',    'password' => '',    'database' => 'C:\sqlite_data\mydata.sqlite3',    'prefix' => '',    'encoding'=>'UTF-8'  );}［リスト3-3］<?phpclass Board extends AppModel {  public $name = 'Board';}?>［リスト3-4］<?phpclass BoardsController extends AppController {  public $name = 'Board';    public function index(){    $data = $this->Board->find('all');    $this->set('data',$data);  }}?>［リスト3-5］Array(  [0] => Array    (      [Board] => Array        (          [id] => 1          [name] => tuyano          [title] => test          [content] => this is test.        )    )  [1] => Array    (      [Board] => Array        (          [id] => 2          [name] => hanako          [title] => hello          [content] => hello!        )    )［リスト3-6］<h1>送信フォーム・サンプル</h1><table><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i]['Board'];  echo "<tr><td>{$arr['id']}</td>";  echo "<td>{$arr['name']}</td>";  echo "<td>{$arr['title']}</td>";  echo "<td>{$arr['content']}</td></tr>";}?></table>［リスト3-7］<h1>送信フォーム・サンプル</h1><table><?phpfor($i = 0;$i < count($data);$i++){  echo $this->Html->tableCells($data[$i]['Board'],array(),array(),true);}?></table>［リスト3-8］class DATABASE_CONFIG {  var $default = array(    'datasource' => 'Database/Mysql',    'persistent' => false,    'host' => 'localhost',    'port' => '3306',    'login' => 'root',    'password' => '',    'database' => 'mydata',    'prefix' => '',    'schema' => '',    'encoding'=>'utf8'  );}［リスト3-9］<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $scaffold;  }?>［リスト3-10］<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $scaffold;    public function index(){    $data = $this->Board->find('all');    $this->set('data',$data);  }}?>［リスト3-11］<h1>送信フォーム・サンプル</h1><?phpecho $this->Form->create(false,array('type'=>'post','action'=>'addRecord'));echo $this->Form->text("Board.name");echo $this->Form->text("Board.title");echo $this->Form->textarea("Board.content");echo $this->Form->submit("送信");echo $this->Form->end();?><br /><hr><br /><table><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i]['Board'];  echo "<tr><td>{$arr['id']}</td>";  echo "<td>{$arr['name']}</td>";  echo "<td>{$arr['title']}</td>";  echo "<td>{$arr['content']}</td></tr>";}?></table>［リスト3-12］<?phpclass BoardsController extends AppController {  public $name = 'Board';    public function index(){    $data = $this->Board->find('all');    $this->set('data',$data);  }    public function addRecord(){    if (!empty($this->data)){      $this->Board->save($this->data);    }    $this->redirect('index');  }}?>［リスト3-13］<form action="/cake/sample/boards/addRecord" id="BoardAddRecordForm" method="post" accept-charset="utf-8">  <div style="display:none;">    <input type="hidden" name="_method" value="POST"/>  </div>  <input name="data[Board][name]" type="text" id="BoardName"/>  <input name="data[Board][title]" type="text" id="BoardTitle"/>  <textarea name="data[Board][content]" id="BoardContent"></textarea>  <div class="submit">    <input  type="submit" value="送信"/>  </div></form>［リスト3-14］<h1>送信フォーム・サンプル</h1><?phpecho $this->Form->create(false,array('type'=>'post','action'=>'index'));echo $this->Form->text("Board.id");echo $this->Form->submit("送信");echo $this->Form->end();?><br /><hr><br /><table><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i]['Board'];  echo "<tr><td>{$arr['id']}</td>";  echo "<td>{$arr['name']}</td>";  echo "<td>{$arr['title']}</td>";  echo "<td>{$arr['content']}</td></tr>";}?></table>［リスト3-15］public function index(){  $data = null;  if (!empty($this->data)){    $data = $this->Board->find('all',array('conditions'=>      array('Board.id' => $this->data['Board']['id'])));  } else {    $data = $this->Board->find('all');  }  $this->set('data',$data);}［リスト3-16］――index.ctp<h1>送信フォーム・サンプル</h1><?phpecho $this->Form->create(false,array('type'=>'post','action'=>'index'));echo $this->Form->text("Board.name");echo $this->Form->submit("送信");echo $this->Form->end();?><br /><hr><br /><table><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i]['Board'];  echo "<tr><td>{$arr['id']}</td>";  echo "<td>{$arr['name']}</td>";  echo "<td>{$arr['title']}</td>";  echo "<td>{$arr['content']}</td></tr>";}?></table>［リスト3-17］――コントローラのアクションメソッドpublic function index(){  $data = null;  if (!empty($this->data)){    $data = $this->Board->find('all',array('conditions'=>       array('Board.name like'=>"%{$this->data['Board']['name']}%")));  } else {    $data = $this->Board->find('all');  }  $this->set('data',$data);}［リスト3-18］――index.ctp<h1>送信フォーム・サンプル</h1><?phpecho $this->Form->create(false,array('type'=>'post','action'=>'index'));echo $this->Form->text("Board.id");echo $this->Form->submit("送信");echo $this->Form->end();?><br /><hr><br /><table><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i]['Board'];  echo "<tr><td>{$arr['id']}</td>";  echo "<td>{$arr['name']}</td>";  echo "<td>{$arr['title']}</td>";  echo "<td>{$arr['content']}</td></tr>";}?></table>［リスト3-19］――コントローラクラスのindexメソッドpublic function index(){  $data = null;  if (!empty($this->data)){    $data = $this->Board->findAllById($this->data['Board']['id']);  } else {    $data = $this->Board->find('all');  }  $this->set('data',$data);}［リスト3-20］――index.ctpの送信フォーム部分<?phpecho $this->Form->create(false,array('type'=>'post','action'=>'delRecord'));echo $this->Form->text("Board.id");echo $this->Form->submit("送信");echo $this->Form->end();?>［リスト3-21］――コントローラの追加メソッドpublic function delRecord(){  if (!empty($this->data)){    $this->Board->delete($this->data['Board']['id']);}  $this->redirect('index');}［リスト3-22］――index.ctpの送信フォーム<?phpecho $this->Form->create(false,array('type'=>'post','action'=>'delRecord'));echo $this->Form->text("Board.name");echo $this->Form->submit("送信");echo $this->Form->end();?>［リスト3-23］――コントローラのアクションメソッドpublic function delRecord(){  if (!empty($this->data)){    $this->Board->deleteAll(array('Board.name'=>      $this->data['Board']['name']));  }  $this->redirect('.');}［リスト3-24］――送信フォーム<?phpecho $this->Form->create(false,array('type'=>'post','action'=>'updateRecord'));echo $this->Form->text("Board.id");echo $this->Form->text("Board.name");echo $this->Form->text("Board.title");echo $this->Form->text("Board.content");echo $this->Form->submit("送信");echo $this->Form->end();?>［リスト3-25］――コントローラのアクションメソッドpublic function updateRecord(){  if (!empty($this->data)){    $this->Board->save($this->data);  }  $this->redirect('index');}［リスト3-26］――送信フォーム<?phpecho $this->Form->create(false,array('type'=>'post','action'=>'updateRecord'));echo $this->Form->text("Board.id");echo $this->Form->text("Board.content");echo $this->Form->submit("送信");echo $this->Form->end();?>［リスト3-27］――コントローラのアクションメソッドpublic function updateRecord(){  if (!empty($this->data)){    $this->Board->id = $this->data['Board']['id']; // あらかじめidをセット    $this->Board->saveField('content',$this->data['Board']['content']); // saveField する  }  $this->redirect('.');}［リスト3-28］<?phpecho $this->Form->create(false,array('type'=>'post','action'=>'updateRecord'));echo $this->Form->text("Board.name");echo $this->Form->text("Board.title");echo $this->Form->submit("送信");echo $this->Form->end();?>［リスト3-29］public function updateRecord(){  if (!empty($this->data)){    $arr1 = array('Board.name'=>$this->data['Board']['name']);    $arr2 = array('Board.title'=>"'{$this->data['Board']['title']}'");    $this->Board->updateAll($arr2,$arr1);  }  $this->redirect('.');}--------------------------------------------------------------------------------secsion 3 - 3--------------------------------------------------------------------------------［リスト3-30］<?phpclass Board extends AppModel {  public $name = 'Board';  public $useDbConfig = 'mysetting'; // DATABASE_CONFIG内の$mysettingを使う}?>［リスト3-31］<?phpclass Board extends AppModel {  public $name = 'Board';  public $useTable = "mytable"; // mytableテーブルを使う}?>［リスト3-32］――アクションメソッドpublic function index(){  $data = $this->Board->find('list');  $this->set('data',$data);}［リスト3-33］――index.ctp<h1>送信フォーム・サンプル</h1><pre><?phpprint_r($data);?></pre>［リスト3-34］――モデル・クラス<?phpclass Board extends AppModel {  public $name = 'Board';  public $displayField = "content";}?>［リスト3-35］――モデル・クラス<?phpclass Board extends AppModel {  public $name = 'Board';  public $order = array('Board.name'=>'ASC','Board.title'=>'DESC');}?>［リスト3-36］――アクションメソッドpublic function index(){  $data = $this->Board->find('all');  $this->set('data',$data);}［リスト3-37］――index.ctp<h1>送信フォーム・サンプル</h1><table><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i]['Board'];  echo "<tr><td>{$arr['id']}</td>";  echo "<td>{$arr['name']}</td>";  echo "<td>{$arr['title']}</td>";  echo "<td>{$arr['content']}</td></tr>";}?></table>［リスト3-38］――モデル・クラス<?phpclass Board extends AppModel {  public $name = 'Board';  public $queryData;    public function beforeFind($queryData){  $this->queryData = $queryData;    return $queryData;  }}?>［リスト3-39］――indexアクションメソッドpublic function index(){  $this->set('data',$this->Board->queryData);}［リスト3-40］――index.ctp<h1>送信フォーム・サンプル</h1><pre><?phpprint_r($data);?></pre>［リスト3-41］Array(    [conditions] =>    [fields] =>    [joins] => Array  (  )    [limit] =>    [offset] =>    [order] => Array  (      [0] =>  )    [page] => 1    [group] =>    [callbacks] => 1)［リスト3-42］――モデル・クラス<?phpclass Board extends AppModel {  public $name = 'Board';  public function beforeFind($queryData){    if (empty($queryData['limit'])){      $queryData['limit'] = 5;    }    if (count($queryData['order']) == 1){      if (empty($queryData['order'][0])){        $queryData['order'] = array('Board.name'=>'ASC');      }    }    return $queryData;  }}?>［リスト3-43］――indexアクションメソッドpublic function index(){  $data = $this->Board->find('all');  $this->set('data',$data);}［リスト3-44］――index.ctp<h1>送信フォーム・サンプル</h1><table><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i]['Board'];  echo "<tr><td>{$arr['id']}</td>";  echo "<td>{$arr['name']}</td>";  echo "<td>{$arr['title']}</td>";  echo "<td>{$arr['content']}</td></tr>";}?></table>［リスト3-45］――モデル・クラス<?phpclass Board extends AppModel {  public $name = 'Board';  public $delname = 'tuyano';  public function afterFind($results,$primary){    for($i = count($results) - 1;$i >= 0;$i--){      if($results[$i]['Board']['name'] == $this->delname){        array_splice($results,$i,1,null);      }    }    return $results;  }}?>［リスト3-46］public function beforeSave(){  $n = $this->find('count',array('conditions'=>array('Board.id' => $this->data['Board']['id'])));  if ($n == 0){    return true;  } else {    return false;  }}［リスト3-47］<?phpclass Board extends AppModel {  public $name = 'Board';  public $validate = array(    'name' => 'notEmpty',    'title' => 'notEmpty',    'content' => 'notEmpty'  );}?>［リスト3-48］<?phpclass Board extends AppModel {  public $name = 'Board';  public $validate = array(    'name'=>array(      'rule' => 'notEmpty',      'message'=>'名前を記入してください。'    ),    'title'=>array(      'rule' => 'notEmpty',      'message'=>'タイトルを記入してください。'    ),    'content'=>array(      'rule' => 'notEmpty',      'message'=>'内容を記入してください。'    )  );}?>［リスト3-49］――index.ctp<h1>送信フォーム・サンプル</h1><?phpecho $this->Form->create(false,array('type'=>'post','action'=>'addRecord'));echo $this->Form->text('Board.name');echo $this->Form->text('Board.title');echo $this->Form->text('Board.content');echo $this->Form->submit("送信");echo $this->Form->end();?><br /><br /><table><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i]['Board'];  echo "<tr><td>{$arr['id']}</td>";  echo "<td>{$arr['name']}</td>";  echo "<td>{$arr['title']}</td>";  echo "<td>{$arr['content']}</td></tr>";}?></table>［リスト3-50］――add_record.ctp<h1>送信フォーム・サンプル</h1><?phpecho $this->Form->create(false,array('type'=>'post','action'=>'addRecord'));echo $this->Form->text('Board.name');echo $this->Form->error('Board.name');echo $this->Form->text('Board.title');echo $this->Form->error('Board.title');echo $this->Form->text('Board.content');echo $this->Form->error('Board.content');echo $this->Form->submit("送信");echo $this->Form->end();?>［リスト3-51］<?phpclass BoardsController extends AppController {  public $name = 'Board';      public function index(){    $data = $this->Board->find('all');    $this->set('data',$data);  }    public function addRecord(){    if ($this->request->isPost()){      $this->Board->save($this->data);      if ($res){        $this->redirect('index');      }    }  }}?>［リスト3-52］'フィールド名' => array(  'rule' => 'alphaNumeric',  'requird' => true,  'message' => '文字・数字以外の記号類は入力できません。')［リスト3-53］'フィールド名' => array(  'rule' => array('between',10,20),  'required' => true,  'message' => '10～20文字以内で入力ください。')［リスト3-54］'フィールド名' => array(  'rule' => 'blank',  'required' => true,  'message' => 'ホワイトスペース以外の文字が含まれています。')［リスト3-55］'フィールド名' => array(  'rule' => 'boolean',  'required' => true,  'message' => '0または1のいずれかを入力ください。')［リスト3-56］'フィールド名' => array(  'rule' => array('cc',array('jcb','visa'),false,null),  'required' => true,  'message' => 'VISAまたはJCBのカード番号を入力ください。')［リスト3-57］'フィールド名' => array(  'rule' => array('comparison','<=',100),  'required' => true,  'message' => '100以下の数字を入力ください。')［リスト3-58］'フィールド名' => array(  'rule' => array('date','ymd'),  'required' => true,  'message' => '年・月・日をハイフンでつなげて入力ください。')［リスト3-59］'フィールド名' => array(  'rule' => array('decimal',2),  'required' => true,  'message' => '小数点以下2桁の小数を入力ください。')［リスト3-60］'フィールド名' => array(  'rule' => array('email',false),  'required' => true,  'message' => 'メールアドレスを入力ください。')［リスト3-61］'フィールド名' => array(  'rule' => array('equalTo','ok'),  'required' => false,  'allowEmpty' => true,  'message' => '問題なければokと入力ください。')［リスト3-62］'フィールド名' => array(  'rule' => array('extension',array('jpg','jpeg')),  'required' => true,  'message' => 'JPEGファイルを入力ください。')［リスト3-63］'フィールド名' => array(  'rule' => 'ip',  'required' => true,  'message' => 'IPアドレスを入力ください。')［リスト3-64］'フィールド名' => array(  'rule' => 'isUnique',  'required' => true,  'message' => '既に登録済みです。他の値を入力ください。')［リスト3-65］'フィールド名' => array(  'rule' => array('maxLength',7),  'required' => true,  'message' => '7文字以下で入力ください。')［リスト3-66］'フィールド名' => array(  'rule' => array('money','left'),  'required' => true,  'message' => '金額を入力ください。')［リスト3-67］'フィールド名' => array(  'rule' => array('inList',array('one','two','three')),  'required' => true,  'message' => 'one,two,threeのいずれかを入力ください。')［リスト3-68］'フィールド名' => array(  'rule' => 'numeric',  'required' => true,  'message' => '数字を入力ください。')［リスト3-69］'フィールド名' => array(  'rule' => 'notEmpty',  'required' => true,  'message' => '何も入力されていません。')［リスト3-70］'フィールド名' => array(  'rule' => array('phone',null,'us'),  'required' => true,  'message' => '電話番号を入力ください。')［リスト3-71］'フィールド名' => array(  'rule' => array('postal',null,'us'),  'required' => true,  'message' => '郵便番号を入力ください。')［リスト3-72］'フィールド名' => array(  'rule' => array('range',5,10),  'required' => true,  'message' => '5～10の範囲内の数字を入力ください。')［リスト3-73］'フィールド名' => array(  'rule' => array('ssn',null,'us'),  'required' => true,  'message' => '社会保障番号を入力ください。')［リスト3-74］'フィールド名' => array(  'rule' =>'url',  'required' => true,  'message' => 'URLを入力ください。')［リスト3-75］'フィールド名' => array(  array(    'rule' => 'numeric',    'message' => '数字を入力ください。'  ),  array(    'rule' => array('maxLength',5),    'message' => '5桁以内で入力ください。'  ),  array(    'rule' => 'notEmpty',    'message' => '必ず入力してください。'))［リスト3-76］'フィールド名' => array(  'numeric' => array(    'rule' => 'numeric',    'message' => '数字を入力ください。'  ),  'maxLength' => array(    'rule' => array('maxLength',5),    'message' => '5桁以内で入力ください。'  ),  array(    'rule' => 'notEmpty',    'message' => '必ず入力してください。'))［リスト3-77］'フィールド名' => array(  'rule' => array('custom',"/\A\d+\z/"),  'required' => true,  'message' => '整数を入力してください。')［リスト3-78］<?phpclass Board extends AppModel {  public $name = 'Board';    public $validate = array(    'name' => array(      'rule' => array('maxRecords','Board.name',5),      'message'=>'既にあなたは5つ投稿しています。'    )  );    public function maxRecords($data,$field,$num){    $n = $this->find( 'count',      array('conditions' => array($field => $data)));    return $n < $num ? true : false;  }}?>［リスト3-79］CREATE TABLE `mydata`.`personals` (  `id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,  `name` VARCHAR(255) NOT NULL UNIQUE,  `password` VARCHAR(255) NOT NULL,  `comment` VARCHAR(255) NULL) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;［リスト3-80］ALTER TABLE `boards` DROP `name`;ALTER TABLE `boards` ADD `personal_id` INT NOT NULL AFTER `id`;［リスト3-81］CREATE TABLE `boards` (  `id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,  `personal_id` INT NOT NULL,  `title` VARCHAR(255) NOT NULL,  `content` TEXT NOT NULL,) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;［リスト3-82］public $uses = array('Board','Personal');［リスト3-83］<?phpclass Personal extends AppModel {  public $name = 'Personal';  public $hasOne = array(    "Board" => array(      'className' => 'Board',      'conditions' => '',      'order' => '',      'dependent' => false,      'foreignKey' => 'personal_id'    )  );    }?>［リスト3-84］<?phpclass Personal extends AppModel {  public $name = 'Personal';  public $hasOne = 'Board';}?>［リスト3-85］――コントローラクラス<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $uses = array('Board','Personal');    public function index(){    $data = $this->Personal->find('all');    $this->set('data',$data);  }}?>［リスト3-86］――index.ctp<h1>モデル・サンプル</h1><pre><?phpprint_r($data);?></pre>［リスト3-87］SELECT `Personal`.`id`, `Personal`.`name`, `Personal`.`password`, `Personal`.`comment`, `Board`.`id`, `Board`.`personal_id`, `Board`.`title`, `Board`.`content` FROM `mydata`.`personals` AS `Personal` LEFT JOIN `mydata`.`boards` AS `Board` ON (`Board`.`personal_id` = `Personal`.`id`) WHERE 1 = 1［リスト3-88］Array(  [0] => Array    (      [Personal] => Array        (          [id] => 1          [name] => tuyano          [password] => tuchan          [comment] => admin.        )      [Board] => Array        (          [id] => 1          [personal_id] => 1          [title] => Test!          [content] => This is Test!        )    )  [1] => Array    (      [Personal] => Array        (          [id] => 2          [name] => taro          [password] => yamada          [comment] => Admin's friend        )      [Board] => Array        (          [id] => 2          [personal_id] => 2          [title] => こんにちは          [content] => これは修正した投稿です。        )    )  ……以下略……)［リスト3-89］<?phpclass Board extends AppModel {  public $name = 'Board';    public $belongsTo = array(    "Personal" => array(      'className' => 'Personal',      'conditions' => '',      'order' => '',      'dependent' => false,      'foreignKey' => 'personal_id'    )  );  }?>［リスト3-90］<?phpclass Board extends AppModel {  public $name = 'Board';  public $belongsTo = 'Personal';}?>［リスト3-91］<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $uses = array('Board','Personal');    public function index(){    $data = $this->Board->find('all');    $this->set('data',$data);  }}?>［リスト3-92］SELECT `Board`.`id`, `Board`.`personal_id`, `Board`.`title`, `Board`.`content`, `Personal`.`id`, `Personal`.`name`, `Personal`.`password`, `Personal`.`comment` FROM `mydata`.`boards` AS `Board` LEFT JOIN `mydata`.`personals` AS `Personal` ON (`Board`.`personal_id` = `Personal`.`id`) WHERE 1 = 1［リスト3-93］<?phpclass Personal extends AppModel {  public $name = 'Personal';    public $hasMany = array(    "Board" => array(      'className' => 'Board',      'conditions' => '',      'order' => '',      'dependent' => false,      'limit' => 0,      'exclusive' => false,      'finderQuery' => '',      'foreignKey' => 'personal_id'    )  );    }?>［リスト3-94］<?phpclass Personal extends AppModel {  public $name = 'Personal';  public $hasMany = 'Board';}?>［リスト3-95］<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $uses = array('Board','Personal');    public function index(){    $data = $this->Personal->find('all');    $this->set('data',$data);  }  }?>［リスト3-96］SELECT `Board`.`id`, `Board`.`personal_id`, `Board`.`title`, `Board`.`content`  FROM `mydata`.`boards` AS `Board` WHERE `Board`.`personal_id` IN (1, 2, 3, 4)［リスト3-97］Array(  [0] => Array  // 1対多でレコードがある場合  (    [Personal] => Array    (      [id] => 1      [name] => tuyano      [password] => tuchan      [comment] => 管理者です。    )    [Board] => Array    (      [0] => Array        (        [id] => 1        [personal_id] => 1        [title] => Update Title!        [content] => this is test.      )      [1] => Array      (        [id] => 19        [personal_id] => 1        [title] => test        [content] => テストです。      )    )  )  [1] => Array  // 1対1でレコードがある場合  (    [Personal] => Array    (      [id] => 2      [name] => taro      [password] => yamada      [comment] => 管理者の友だちです。    )    [Board] => Array    (      [0] => Array      (        [id] => 2        [personal_id] => 2        [title] => こんにちは        [content] => これは試しに投稿するものです。      )    )  )  [2] => Array  // 関連レコードがない場合  (    [Personal] => Array    (      [id] => 3      [name] => hanako      [password] => hana      [comment] => 花子です。    )    [Board] => Array    (    )  ))［リスト3-98］――Board.php<?phpclass Board extends AppModel {  public $name = 'Board';}?>［リスト3-99］――Personal.php<?phpclass Personal extends AppModel {  public $name = 'Personal';}?>［リスト3-100］<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $uses = array('Board','Personal');    public function index(){    $this->Personal->bindModel(      array('hasMany' => array(        "Board" => array(          'className' => 'Board',          'conditions' => '',          'order' => '',          'dependent' => false,          'limit' => 0,          'exclusive' => false,          'finderQuery' => '',          'foreignKey' => 'personal_id'        )      ))    );        $data = $this->Personal->find('all');    $this->set('data',$data);  }  }?>［リスト3-101］<?phpclass PersonalsController extends AppController {  public $name = 'Personals';  public $scaffold;}?>［リスト3-102］――Board.php<?phpclass Board extends AppModel {  public $name = 'Board';  public $validate = array(    'title' => array(      'rule' => 'notEmpty',      'message' => 'タイトルは必ず入力してください。'    ),    'content' => array(      'rule' => 'notEmpty',      'message' => '内容は必ず入力してください。'    )  );  public $belongsTo = array(    "Personal" => array(      'className' => 'Personal',      'conditions' => '',      'order' => '',      'dependent' => false,      'foreignKey' => 'personal_id'    )  );}?>［リスト3-103］――Personal.php<?phpclass Personal extends AppModel {  public $name = 'Personal';    public $validate = array(    'name' => array(      'rule' => 'notEmpty',      'message' => '名前は必ず入力してください。'    ),    'password' => array(      'rule' => 'notEmpty',      'message' => 'パスワードは必ず入力してください。'    ),    'comment' => array()  );  public function checkNameAndPass($data){    $n = $this->find('count',array(      'conditions' => array(        'Personal.name' => $data['Personal']['name'],        'Personal.password' => $data['Personal']['password']      )    ));    return $n > 0 ? true : false;  }  }?>［リスト3-104］――BoardsController.php<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $uses = array('Board','Personal');    public function index(){    $data = $this->Board->find('all',array('order'=>'Board.id desc'));    $this->set('data',$data);  }  }?>［リスト3-105］――Boards/index.ctp<h1>掲示板</h1><br /><a href="/cake/sample/boards/add">※投稿する</a><br /><br /><table><tr><th>投稿者</th><th>タイトル</th></tr><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i];  echo "<tr>";  echo "<td><a href='/cake/sample/boards/show2/{$arr['Personal']['id']}'> {$arr['Personal']['name']}</a></td>";  echo "<td><a href='/cake/sample/boards/show/{$arr['Board']['id']}'> {$arr['Board']['title']}</a></td>";  echo "</tr>";}?></table>［リスト3-106］――BoardsController.phpのaddメソッドpublic function add(){  if ($this->request->isPost()){    if ($this->Personal->checkNameAndPass($this->data) == 0){        $this->Personal->invalidate('name','名前またはパスワードを確認ください。');        $this->Personal->invalidate('password','名前またはパスワードを確認ください。');    } else {      $res = $this->Personal->find('all',array(        'conditions' => array(          'Personal.name' => $this->data['Personal']['name'],          'Personal.password' => $this->data['Personal']['password'],        )      ));      $record = $this->data['Board'];      $record['personal_id'] = $res[0]['Personal']['id'];      $flg = $this->Board->save($record);      if($flg){        $this->redirect('.');      }    }  }}［リスト3-107］――Board/add.ctp<h1>投稿フォーム</h1><br /><a href="/cake/sample/boards/index">※一覧に戻る</a><br /><br /><?phpecho $this->Form->create(false,array('type'=>'post','action'=>''));echo '名前：' . $this->Form->text('Personal.name');echo $this->Form->error('Personal.name');echo 'パスワード：' . $this->Form->password('Personal.password');echo $this->Form->error('Personal.password');echo 'タイトル：' . $this->Form->text('Board.title');echo $this->Form->error('Board.title');echo '内容：' . $this->Form->textarea('Board.content');echo $this->Form->error('Board.content');echo $this->Form->end("送信")?><br /><br />［リスト3-108］――BoardsController.phpのshowメソッドpublic function show($param){  $data = $this->Board->find('all',array(    'conditions' => array(      'Board.id' => $param)    )  );  $this->set('data',$data);}［リスト3-109］――Board/show.ctp<h1>掲示板</h1><br /><a href="/cake/sample/boards/index">※一覧に戻る</a><br /><br /><table><?phpecho "<tr><th>投稿者</th><td>{$data[0]['Personal']['name']}</td></tr>";echo "<tr><th>タイトル</th><td>{$data[0]['Board']['title']}</td></tr>";echo "<tr><th>内容</th><td>{$data[0]['Board']['content']}</td></tr>";$id = $data[0]['Board']['id'];?></table><br /><a href="/cake/sample/boards/edit/<?php echo $id; ?>">  ※この投稿を編集する</a><br />［リスト3-110］――BoardsController.phpのshow2メソッドpublic function show2($param){  $data = $this->Personal->find('all',array(    'conditions' => array(      'Personal.id' => $param)    )  );  $this->set('data',$data);}［リスト3-111］――Board/show2.ctp<h1>掲示板</h1><br /><a href="/cake/sample/boards/index">※一覧に戻る</a><br /><br /><table><?phpecho "<tr><th>投稿者</th><td>{$data[0]['Personal']['name']}</td></tr>";echo "<tr><th>コメント</th><td>{$data[0]['Personal']['comment']}</td></tr>";?></table><br />［リスト3-112］――BoardsController.phpのeditメソッドpublic function edit($param){  if (!empty($this->data)){    $this->set('data',$this->data);    if ($this->Personal->checkNameAndPass($this->data) == 0){      $this->Personal->invalidate('password','パスワードを確認ください。');    } else {      $this->Board->save($this->data);      $this->redirect('.');    }  } else {    $this->Board->id = $param;    $res = $this->Board->read();    $res['Personal']['password'] = null;    $this->data = $res;    $this->set('data',$res);  }}［リスト3-113］――Board/edit.ctp<h1>編集フォーム</h1><br /><a href="/cake/sample/boards/index">※一覧に戻る</a><br /><br /><?phpecho $this->Form->create(false,array('type'=>'post','action'=>""));echo $this->Form->hidden('Board.id');echo $this->Form->hidden('Board.personal_id');echo $this->Form->hidden('Personal.id');echo $this->Form->hidden('Personal.name');echo "名前：{$data['Personal']['name']}<br /><br />";echo "パスワード：{$this->Form->password('Personal.password')}";echo $this->Form->error('Personal.password');echo "タイトル：{$this->Form->text('Board.title')}";echo $this->Form->error('Board.title');echo "内容：{$this->Form->textarea('Board.content')}";echo $this->Form->error('Board.content');echo $this->Form->end('送信')?><br />［リスト4-1］CREATE TABLE `mydata`.`Catalogs` (  `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,  `name` VARCHAR( 255 ) NOT NULL ,  `price` INT NOT NULL ,  `stock` INT NOT NULL ,  `comment` VARCHAR( 255 ) NULL) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;［リスト4-2］CREATE TABLE `mydata`.`Customers` (  `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,  `name` VARCHAR( 255 ) NOT NULL ,  `comment` VARCHAR( 255 ) NULL) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;［リスト4-3］CREATE TABLE `mydata`.`Sales` (  `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,  `catalog_id` INT NOT NULL ,  `customer_id` INT NOT NULL ,  `date` DATETIME NOT NULL) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;［リスト4-4］――Sale.php<?phpApp::uses('AppModel', 'Model');/** * Sale Model * * @property Catalog $Catalog * @property Customer $Customer */class Sale extends AppModel {/** * Validation rules * * @var array */  public $validate = array(    'catalog_id' => array(      'numeric' => array(        'rule' => array('numeric'),        //'message' => 'Your custom message here',        //'allowEmpty' => false,        //'required' => false,        //'last' => false, // Stop validation after this rule        //'on' => 'create', // Limit validation to 'create' or 'update' operations      ),    ),    'customer_id' => array(      'numeric' => array(        'rule' => array('numeric'),        //'message' => 'Your custom message here',        //'allowEmpty' => false,        //'required' => false,        //'last' => false, // Stop validation after this rule        //'on' => 'create', // Limit validation to 'create' or 'update' operations      ),    ),  );  //The Associations below have been created with all possible keys, those that are not needed can be removed/** * belongsTo associations * * @var array */  public $belongsTo = array(    'Catalog' => array(      'className' => 'Catalog',      'foreignKey' => 'catalog_id',      'conditions' => '',      'fields' => '',      'order' => ''    ),    'Customer' => array(      'className' => 'Customer',      'foreignKey' => 'customer_id',      'conditions' => '',      'fields' => '',      'order' => ''    )  );}［リスト4-5］――Catalog.php<?phpApp::uses('AppModel', 'Model');/** * Catalog Model * */class Catalog extends AppModel {/** * Display field * * @var string */  public $displayField = 'name';/** * Validation rules * * @var array */  public $validate = array(    'name' => array(      'notempty' => array(        'rule' => array('notempty'),        //'message' => 'Your custom message here',        //'allowEmpty' => false,        //'required' => false,        //'last' => false, // Stop validation after this rule        //'on' => 'create', // Limit validation to 'create' or 'update' operations      ),    ),    'price' => array(      'numeric' => array(        'rule' => array('numeric'),        //'message' => 'Your custom message here',        //'allowEmpty' => false,        //'required' => false,        //'last' => false, // Stop validation after this rule        //'on' => 'create', // Limit validation to 'create' or 'update' operations      ),    ),    'stock' => array(      'numeric' => array(        'rule' => array('numeric'),        //'message' => 'Your custom message here',        //'allowEmpty' => false,        //'required' => false,        //'last' => false, // Stop validation after this rule        //'on' => 'create', // Limit validation to 'create' or 'update' operations      ),    ),  );}［リスト4-6］――Customer.php<?phpApp::uses('AppModel', 'Model');/** * Customer Model * */class Customer extends AppModel {/** * Display field * * @var string */  public $displayField = 'name';/** * Validation rules * * @var array */  public $validate = array(    'name' => array(      'notempty' => array(        'rule' => array('notempty'),        //'message' => 'Your custom message here',        //'allowEmpty' => false,        //'required' => false,        //'last' => false, // Stop validation after this rule        //'on' => 'create', // Limit validation to 'create' or 'update' operations      ),    ),  );}［リスト4-7］――CatalogsController.php<?phpApp::uses('AppController', 'Controller');/** * Catalogs Controller * */class CatalogsController extends AppController {/** * Scaffold * * @var mixed */  public $scaffold;}［リスト4-8］――CustomersController.php<?phpApp::uses('AppController', 'Controller');/** * Customers Controller * */class CustomersController extends AppController {/** * Scaffold * * @var mixed */  public $scaffold;}［リスト4-9］――SalesController.php<?phpApp::uses('AppController', 'Controller');/** * Sales Controller * * @property Sale $Sale */class SalesController extends AppController {/** * index method * * @return void */  public function index() {    $this->Sale->recursive = 0;    $this->set('sales', $this->paginate());  }/** * view method * * @param string $id * @return void */  public function view($id = null) {    $this->Sale->id = $id;    if (!$this->Sale->exists()) {      throw new NotFoundException(__('Invalid sale'));    }    $this->set('sale', $this->Sale->read(null, $id));  }/** * add method * * @return void */  public function add() {    if ($this->request->is('post')) {      $this->Sale->create();      if ($this->Sale->save($this->request->data)) {        $this->Session->setFlash(__('The sale has been saved'));        $this->redirect(array('action' => 'index'));      } else {        $this->Session->setFlash(__('The sale could not be saved. Please, try again.'));      }    }    $catalogs = $this->Sale->Catalog->find('list');    $customers = $this->Sale->Customer->find('list');    $this->set(compact('catalogs', 'customers'));  }/** * edit method * * @param string $id * @return void */  public function edit($id = null) {    $this->Sale->id = $id;    if (!$this->Sale->exists()) {      throw new NotFoundException(__('Invalid sale'));    }    if ($this->request->is('post') || $this->request->is('put')) {      if ($this->Sale->save($this->request->data)) {        $this->Session->setFlash(__('The sale has been saved'));        $this->redirect(array('action' => 'index'));      } else {        $this->Session->setFlash(__('The sale could not be saved. Please, try again.'));      }    } else {      $this->request->data = $this->Sale->read(null, $id);    }    $catalogs = $this->Sale->Catalog->find('list');    $customers = $this->Sale->Customer->find('list');    $this->set(compact('catalogs', 'customers'));  }/** * delete method * * @param string $id * @return void */  public function delete($id = null) {    if (!$this->request->is('post')) {      throw new MethodNotAllowedException();    }    $this->Sale->id = $id;    if (!$this->Sale->exists()) {      throw new NotFoundException(__('Invalid sale'));    }    if ($this->Sale->delete()) {      $this->Session->setFlash(__('Sale deleted'));      $this->redirect(array('action' => 'index'));    }    $this->Session->setFlash(__('Sale was not deleted'));    $this->redirect(array('action' => 'index'));  }}［リスト4-10］――index.ctp<div class="sales index">  <h2><?php echo __('Sales');?></h2>  <table cellpadding="0" cellspacing="0">  <tr>      <th><?php echo $this->Paginator->sort('id');?></th>      <th><?php echo $this->Paginator->sort('catalog_id');?></th>      <th><?php echo $this->Paginator->sort('customer_id');?></th>      <th><?php echo $this->Paginator->sort('date');?></th>      <th class="actions"><?php echo __('Actions');?></th>  </tr>  <?php  foreach ($sales as $sale): ?>  <tr>    <td><?php echo h($sale['Sale']['id']); ?>&nbsp;</td>    <td>      <?php echo $this->Html->link($sale['Catalog']['name'],         array('controller' => 'catalogs',         'action' => 'view', $sale['Catalog']['id'])); ?>    </td>    <td>      <?php echo $this->Html->link($sale['Customer']['name'],         array('controller' => 'customers', 'action' => 'view',         $sale['Customer']['id'])); ?>    </td>    <td><?php echo h($sale['Sale']['date']); ?>&nbsp;</td>    <td class="actions">      <?php echo $this->Html->link(__('View'), array('action' => 'view',         $sale['Sale']['id'])); ?>      <?php echo $this->Html->link(__('Edit'), array('action' => 'edit',         $sale['Sale']['id'])); ?>      <?php echo $this->Form->postLink(__('Delete'), array('action' => 'delete',         $sale['Sale']['id']), null, __('Are you sure you want to delete # %s?',         $sale['Sale']['id'])); ?>    </td>  </tr><?php endforeach; ?>  </table>  <p>  <?php  echo $this->Paginator->counter(array(  'format' => __('Page {:page} of {:pages}, showing {:current} records out of {:count} total, starting on record {:start}, ending on {:end}')  ));  ?>  </p>  <div class="paging">  <?php    echo $this->Paginator->prev('< ' . __('previous'), array(), null,       array('class' => 'prev disabled'));    echo $this->Paginator->numbers(array('separator' => ''));    echo $this->Paginator->next(__('next') . ' >', array(), null,       array('class' => 'next disabled'));  ?>  </div></div><div class="actions">  <h3><?php echo __('Actions'); ?></h3>  <ul>    <li><?php echo $this->Html->link(__('New Sale'), array('action' => 'add')); ?></li>    <li><?php echo $this->Html->link(__('List Catalogs'),      array('controller' => 'catalogs', 'action' => 'index')); ?> </li>    <li><?php echo $this->Html->link(__('New Catalog'),      array('controller' => 'catalogs', 'action' => 'add')); ?> </li>    <li><?php echo $this->Html->link(__('List Customers'),      array('controller' => 'customers', 'action' => 'index')); ?> </li>    <li><?php echo $this->Html->link(__('New Customer'),      array('controller' => 'customers', 'action' => 'add')); ?> </li>  </ul></div>［リスト4-11］  <tr>    <td><?php echo h($sale['Sale']['id']); ?>&nbsp;</td>    <td>      <?php echo $this->Html->link($sale['Catalog']['name'],        array('controller' => 'catalogs',        'action' => 'view', $sale['Catalog']['id'])); ?>    </td>    <td>      <?php echo $this->Html->link($sale['Customer']['name'],        array('controller' => 'customers', 'action' => 'view',        $sale['Customer']['id'])); ?>    </td>    <td><?php echo h($sale['Sale']['date']); ?>&nbsp;</td>    <td class="actions">      <?php echo $this->Html->link(__('View'), array('action' => 'view',        $sale['Sale']['id'])); ?>      <?php echo $this->Html->link(__('Edit'), array('action' => 'edit',        $sale['Sale']['id'])); ?>      <?php echo $this->Form->postLink(__('Delete'), array('action' => 'delete',        $sale['Sale']['id']), null, __('Are you sure you want to delete # %s?',        $sale['Sale']['id'])); ?>    </td>  </tr>［リスト4-12］  <ul>    <li><?php echo $this->Html->link(__('New Sale'), array('action' => 'add')); ?></li>    <li><?php echo $this->Html->link(__('List Catalogs'), array('controller' => 'catalogs', 'action' => 'index')); ?> </li>    <li><?php echo $this->Html->link(__('New Catalog'), array('controller' => 'catalogs', 'action' => 'add')); ?> </li>    <li><?php echo $this->Html->link(__('List Customers'), array('controller' => 'customers', 'action' => 'index')); ?> </li>    <li><?php echo $this->Html->link(__('New Customer'), array('controller' => 'customers', 'action' => 'add')); ?> </li>  </ul>［リスト4-13］<?phpclass DATABASE_CONFIG {  public $default = array(    'datasource' => 'Database/Mysql',    'persistent' => false,    'host' => 'localhost',    'login' => 'root',    'password' => '',    'database' => 'mydata',    'encoding' => 'utf8'  );    var $test = array(    'datasource' => 'Database/Mysql',    'persistent' => false,    'host' => 'localhost',    'login' => 'root',    'password' => '',    'database' => 'temp_mydata',    'encoding' => 'utf8'  );}［リスト4-14］――BoardFixture.php<?php/** * BoardFixture * */class BoardFixture extends CakeTestFixture {/** * Fields * * @var array */  public $fields = array(    'id' => array('type' => 'integer', 'null' => false, 'default' => NULL, 'key' => 'primary'),    'personal_id' => array('type' => 'integer', 'null' => false, 'default' => NULL),    'title' => array('type' => 'string', 'null' => false, 'default' => NULL, 'collate' => 'utf8_unicode_ci', 'charset' => 'utf8'),    'content' => array('type' => 'text', 'null' => false, 'default' => NULL, 'collate' => 'utf8_unicode_ci', 'charset' => 'utf8'),    'indexes' => array('PRIMARY' => array('column' => 'id', 'unique' => 1)), 'tableParameters' => array('charset' => 'utf8', 'collate' => 'utf8_unicode_ci', 'engine' => 'InnoDB')  );/** * Records * * @var array */  public $records = array(    array(      'id' => 1001,      'personal_id' => 1001,      'title' => 'Lorem ipsum dolor sit amet',      'content' => 'Lorem ipsum dolor sit amet, aliquet feugiat. Convallis morbi fringilla gravida, phasellus feugiat dapibus velit nunc, pulvinar eget sollicitudin enenatis cum nullam, vivamus ut a sed, mollitia lectus. Nulla vestibulum massa neque ut et, id hendrerit sit, feugiat in taciti enim proin nibh, tempor dignissim, rhoncus duis vestibulum nunc mattis convallis.'    ),  );}［リスト4-15］――PersonalFixture.php<?php/** * PersonalFixture * */class PersonalFixture extends CakeTestFixture {/** * Fields * * @var array */  public $fields = array(    'id' => array('type' => 'integer', 'null' => false, 'default' => NULL, 'key' => 'primary'),    'name' => array('type' => 'string', 'null' => false, 'default' => NULL, 'key' => 'unique', 'collate' => 'utf8_unicode_ci', 'charset' => 'utf8'),    'password' => array('type' => 'string', 'null' => false, 'default' => NULL, 'collate' => 'utf8_unicode_ci', 'charset' => 'utf8'),    'comment' => array('type' => 'string', 'null' => true, 'default' => NULL, 'collate' => 'utf8_unicode_ci', 'charset' => 'utf8'),    'indexes' => array('PRIMARY' => array('column' => 'id', 'unique' => 1), 'name' => array('column' => 'name', 'unique' => 1)),    'tableParameters' => array('charset' => 'utf8', 'collate' => 'utf8_unicode_ci', 'engine' => 'InnoDB')  );/** * Records * * @var array */  public $records = array(    array(      'id' => 1001,      'name' => 'Lorem ipsum dolor sit amet',      'password' => 'Lorem ipsum dolor sit amet',      'comment' => 'Lorem ipsum dolor sit amet'    ),  );}［リスト4-16］――Model/BoardTest.php<?phpApp::uses('Board', 'Model');/*** Board Test Case**/class BoardTestCase extends CakeTestCase {/*** Fixtures** @var array*/  public $fixtures = array('app.board', 'app.personal');/*** setUp method** @return void*/  public function setUp() {    parent::setUp();    $this->Board = ClassRegistry::init('Board');  }/*** tearDown method** @return void*/  public function tearDown() {    unset($this->Board);    parent::tearDown();  }}［リスト4-17］――Model/PersonalTest.php<?phpApp::uses('Personal', 'Model');/** * Personal Test Case * */class PersonalTestCase extends CakeTestCase {/** * Fixtures * * @var array */  public $fixtures = array('app.personal');/** * setUp method * * @return void */  public function setUp() {    parent::setUp();    $this->Personal = ClassRegistry::init('Personal');  }/** * tearDown method * * @return void */  public function tearDown() {    unset($this->Personal);    parent::tearDown();  }/** * testCheckNameAndPass method * * @return void */  public function testCheckNameAndPass() {  }}［リスト4-18］――Model/BoardTest.php<?phpApp::uses('Board', 'Model');/** Board Test Case */class BoardTestCase extends CakeTestCase {/** Fixtures */  public $fixtures = array('app.board', 'app.personal');/** setUp method */  public function setUp() {    parent::setUp();    $this->Board = ClassRegistry::init('Board');  }/**  tearDown method */  public function tearDown() {    unset($this->Board);    parent::tearDown();  }/** testBoardInstance method */  public function testBoardInstance() {    $this->assertTrue(is_a($this->Board, 'Board'));  }/** testBoardFind method */  public function testBoardFind() {    $this->Board->recursive = -1;    $results = $this->Board->find('first');    $this->assertTrue(!empty($results));    $expected = array(      'Board' => array(        'id'  => 1001,        'personal_id'  => 1001,        'title'  => 'Lorem ipsum dolor sit amet',        'content'  => 'Lorem ipsum dolor sit amet, aliquet feugiat. Convallis morbi fringilla gravida, phasellus feugiat dapibus velit nunc, pulvinar eget sollicitudin venenatis cum nullam, vivamus ut a sed, mollitia lectus. Nulla vestibulum massa neque ut et, id hendrerit sit, feugiat in taciti enim proin nibh, tempor dignissim, rhoncus duis vestibulum nunc mattis convallis.')    );    $this->assertEqual($results, $expected);  }  }［リスト4-19］――Model/PersonalTest.php<?phpApp::uses('Personal', 'Model');/** Personal Test Case */class PersonalTestCase extends CakeTestCase {/** Fixtures */  public $fixtures = array('app.personal');/** setUp method */  public function setUp() {    parent::setUp();    $this->Personal = ClassRegistry::init('Personal');  }/** tearDown method */  public function tearDown() {    unset($this->Personal);    parent::tearDown();  }/** testPersonalInstance method */  public function testPersonalInstance() {    $this->assertTrue(is_a($this->Personal, 'Personal'));  }/** testPersonalFind method */  public function testPersonalFind() {    $this->Personal->recursive = -1;    $results = $this->Personal->find('first');    $this->assertTrue(!empty($results));    $expected = array(      'Personal' => array(        'id'  => 1001,        'name'  => 'Lorem ipsum dolor sit amet',        'password'  => 'Lorem ipsum dolor sit amet',        'comment'  => 'Lorem ipsum dolor sit amet'      )    );    $this->assertEqual($results, $expected);  }  }［リスト4-20］――Controller/BoardsControllerTest.php<?phpApp::uses('BoardsController', 'Controller');/** * TestBoardsController * */class TestBoardsController extends BoardsController {/** * Auto render * * @var boolean */  public $autoRender = false;/** * Redirect action * * @param mixed $url * @param mixed $status * @param boolean $exit * @return void */  public function redirect($url, $status = null, $exit = true) {    $this->redirectUrl = $url;  }}/** * BoardsController Test Case * */class BoardsControllerTestCase extends CakeTestCase {/** * Fixtures * * @var array */  public $fixtures = array('app.board', 'app.personal');/** * setUp method * * @return void */  public function setUp() {    parent::setUp();    $this->Boards = new TestBoardsController();    $this->Boards->constructClasses();  }/** * tearDown method * * @return void */  public function tearDown() {    unset($this->Boards);    parent::tearDown();  }/** * testIndex method * * @return void */  public function testIndex() {  }/** * testAdd method * * @return void */  public function testAdd() {  }/** * testShow method * * @return void */  public function testShow() {  }/** * testShow2 method * * @return void */  public function testShow2() {  }/** * testEdit method * * @return void */  public function testEdit() {  }}［リスト4-21］――Controller/PersonalsControllerTest.php<?phpApp::uses('PersonalsController', 'Controller');/** * TestPersonalsController * */class TestPersonalsController extends PersonalsController {/** * Auto render * * @var boolean */  public $autoRender = false;/** * Redirect action * * @param mixed $url * @param mixed $status * @param boolean $exit * @return void */  public function redirect($url, $status = null, $exit = true) {    $this->redirectUrl = $url;  }}/** * PersonalsController Test Case * */class PersonalsControllerTestCase extends CakeTestCase {/** * Fixtures * * @var array */  public $fixtures = array('app.personal');/** * setUp method * * @return void */  public function setUp() {    parent::setUp();    $this->Personals = new TestPersonalsController();    $this->Personals->constructClasses();  }/** * tearDown method * * @return void */  public function tearDown() {    unset($this->Personals);    parent::tearDown();  }}［リスト4-22］// モデルのインスタンス作成public function testBoardInstance() {  $this->assertTrue(is_a($this->Board, 'Board'));}// モデルでの検索public function testBoardFind() {  $this->Board->recursive = -1;  $results = $this->Board->find('first');  $this->assertTrue(!empty($results));  $expected = array(    'Board' => array(      'id'  => 1001,      'personal_id'  => 1001,      'title'  => 'Lorem ipsum dolor sit amet',      'content'  => 'Lorem ipsum dolor sit amet, aliquet feugiat. Convallis morbi fringilla gravida, phasellus feugiat dapibus velit nunc, pulvinar eget sollicitudin venenatis cum nullam, vivamus ut a sed, mollitia lectus. Nulla vestibulum massa neque ut et, id hendrerit sit, feugiat in taciti enim proin nibh, tempor dignissim, rhoncus duis vestibulum nunc mattis convallis.' )  );  $this->assertEqual($results, $expected);}［リスト4-23］public function testIndex() {  $res = $this->Boards->Board->find('all');  $this->assertNotNull($res[0]['Board']);  $this->assertNotNull($res[0]['Personal']);  $this->assertEqual($res[0]['Board']['id'], 1001);  $this->assertEqual($res[0]['Board']['personal_id'], $res[0]['Personal']['id']);}［リスト4-24］public function startCase(){  debug("Start Case: BoardsControllerTest");}public function endCase(){  debug("End Case: BoardsControllerTest");}public function startTest($method){  debug("Start Test: " . $method);}public function endTest($method){  debug("Start Test: " . $method);}［リスト4-25］<h1>掲示板</h1><br /><a href="/cake/sample/boards/add">※投稿する</a><br /><br /><table><tr><th>投稿者</th><th>タイトル</th></tr><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i];  echo "<tr>";  echo "<td><a href='/cake/sample/boards/show2/{$arr['Personal']['id']}'>    {$arr['Personal']['name']}</a></td>";  echo "<td><a href='/cake/sample/boards/show/{$arr['Board']['id']}'>    {$arr['Board']['title']}</a></td>";  echo "</tr>";}?></table>［リスト4-26］<h1><?php echo __('掲示板') ?></h1><br /><a href="/cake/sample/boards/add"><?php echo __('※投稿する'); ?></a><br /><br /><table><tr><th><?php echo __('投稿者') ?></th><th><?php echo __('タイトル'); ?></th></tr><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i];  echo "<tr>";  echo "<td><a href='/cake/sample/boards/show2/{$arr['Personal']['id']}'>    {$arr['Personal']['name']}</a></td>";  echo "<td><a href='/cake/sample/boards/show/{$arr['Board']['id']}'>    {$arr['Board']['title']}</a></td>";  echo "</tr>";}?></table>［リスト4-27］# LANGUAGE translation of CakePHP Application# Copyright YEAR NAME <EMAIL@ADDRESS>##, fuzzymsgid ""msgstr """Project-Id-Version: PROJECT VERSION\n""POT-Creation-Date: 2012-05-17 09:55+0200\n""PO-Revision-Date: YYYY-mm-DD HH:MM+ZZZZ\n""Last-Translator: NAME <EMAIL@ADDRESS>\n""Language-Team: LANGUAGE <EMAIL@ADDRESS>\n""MIME-Version: 1.0\n""Content-Type: text/plain; charset=utf-8\n""Content-Transfer-Encoding: 8bit\n""Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"#: View\Boards\index.ctp:1msgid "掲示板"msgstr ""#: View\Boards\index.ctp:2msgid "※投稿する"msgstr ""#: View\Boards\index.ctp:5msgid "投稿者"msgstr ""#: View\Boards\index.ctp:5msgid "タイトル"msgstr ""#: Model\Board.php:validation for field titlemsgid "タイトルは必ず入力してください。"msgstr ""#: Model\Board.php:validation for field contentmsgid "内容は必ず入力してください。"msgstr ""#: Model\Personal.php:validation for field namemsgid "名前は必ず入力してください。"msgstr ""#: Model\Personal.php:validation for field passwordmsgid "パスワードは必ず入力してください。"msgstr ""［リスト4-28］――「jpn」側のデータ# LANGUAGE translation of CakePHP Application# Copyright YEAR NAME <EMAIL@ADDRESS>##, fuzzymsgid ""msgstr """Project-Id-Version: PROJECT VERSION\n""POT-Creation-Date: 2012-05-17 09:55+0200\n""PO-Revision-Date: YYYY-mm-DD HH:MM+ZZZZ\n""Last-Translator: NAME <EMAIL@ADDRESS>\n""Language-Team: LANGUAGE <EMAIL@ADDRESS>\n""MIME-Version: 1.0\n""Content-Type: text/plain; charset=utf-8\n""Content-Transfer-Encoding: 8bit\n""Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"#: View\Boards\index.ctp:1msgid "掲示板"msgstr "掲示板"#: View\Boards\index.ctp:2msgid "※投稿する"msgstr "投稿する"#: View\Boards\index.ctp:5msgid "投稿者"msgstr "投稿者"#: View\Boards\index.ctp:5msgid "タイトル"msgstr "タイトル"#: Model\Board.php:validation for field titlemsgid "タイトルは必ず入力してください。"msgstr "タイトルは必ず入力してください。"#: Model\Board.php:validation for field contentmsgid "内容は必ず入力してください。"msgstr "内容は必ず入力してください。"#: Model\Personal.php:validation for field namemsgid "名前は必ず入力してください。"msgstr "名前は必ず入力してください。"#: Model\Personal.php:validation for field passwordmsgid "パスワードは必ず入力してください。"msgstr "パスワードは必ず入力してください。"［リスト4-29］――「eng」側のデータ# LANGUAGE translation of CakePHP Application# Copyright YEAR NAME <EMAIL@ADDRESS>##, fuzzymsgid ""msgstr """Project-Id-Version: PROJECT VERSION\n""POT-Creation-Date: 2012-05-17 09:55+0200\n""PO-Revision-Date: YYYY-mm-DD HH:MM+ZZZZ\n""Last-Translator: NAME <EMAIL@ADDRESS>\n""Language-Team: LANGUAGE <EMAIL@ADDRESS>\n""MIME-Version: 1.0\n""Content-Type: text/plain; charset=utf-8\n""Content-Transfer-Encoding: 8bit\n""Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"#: View\Boards\index.ctp:1msgid "掲示板"msgstr "Message Board"#: View\Boards\index.ctp:2msgid "※投稿する"msgstr "New Board"#: View\Boards\index.ctp:5msgid "投稿者"msgstr "User"#: View\Boards\index.ctp:5msgid "タイトル"msgstr "Title"#: Model\Board.php:validation for field titlemsgid "タイトルは必ず入力してください。"msgstr "title is required."#: Model\Board.php:validation for field contentmsgid "内容は必ず入力してください。"msgstr "content is required."#: Model\Personal.php:validation for field namemsgid "名前は必ず入力してください。"msgstr "nae is required."#: Model\Personal.php:validation for field passwordmsgid "パスワードは必ず入力してください。"msgstr "password is required."［リスト4-30］public function index(){  Configure::write('Config.language','en'); // ★  $data = $this->NextBoard->find('all');  $this->set('data',$data);}［リスト5-1］<?php echo $this->Html->charset('utf-8') ?>［リスト5-2］<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />［リスト5-3］<?php echo $this->Html->css('hello'); ?>［リスト5-4］<link rel="stylesheet" type="text/css" href="/cake/sample/css/hello.css" />［リスト5-5］<p style='<?php echo $this->Html->style(array('color'=>'red','font-size'=>'14','font-weight'=>'bold'),false); ?>'>Hello</p>［リスト5-6］<p style='color:red;  font-size:14;  font-weight:bold;'>Hello</p>［リスト5-7］<?php echo $this->Html->doctype('xhtml-strict'); ?>［リスト5-8］<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">［リスト5-9］<?php echo $this->Html->meta('keywords',null, array('content'=>'php,cakephp,bake,フレームワーク'),false); ?>［リスト5-10］<meta name="keywords" content="php,cakephp,bake,フレームワーク" />［リスト5-11］<?php echo $this->Html->image('sample.jpg', array('width'=>'200','height'=>'200','alt'=>'sample image')); ?>［リスト5-12］<img src="/cake/sample/img/sample.jpg" width="200" height="200" alt="sample image" />［リスト5-13］<?php echo $this->Html->link("<\"sample link\">",'http://google.com', array('target'=>'_blank'),'移動します。'); ?>［リスト5-14］<a href="http://google.com" target="_blank"   onclick="return confirm(&#039;移動します。&#039;);">  &lt;&quot;sample link&quot;&gt;</a>［リスト5-15］<?php echo $this->Html->para('p_style',  'これは、&lt;p&gt;タグを自動生成したものです。',  array('align'=>'center')); ?>［リスト5-16］<p align="center" class="p_style">これは、&lt;p&gt;タグを自動生成したものです。</p>［リスト5-17］<?php echo $this->Html->div('div_style',  'これは、&lt;div&gt;タグを自動生成したものです。',  array('onclick'=>'alert("クリックしました。")')); ?>［リスト5-18］<div onclick="alert(&quot;クリックしました。&quot;)"  class="div_style">これは、&lt;div&gt;タグを自動生成したものです。</div>［リスト5-19］<table>  <tr style='color:#000066; background-color: #AAAAFF'>    <th>投稿者</th><th>タイトル</th>  </tr><?phpforeach($data as $record){  echo "<tr style='color:#000099; background-color: #DDDDFF'>";  echo "<td>{$record['Personal']['name']}</td>";  echo "<td>{$record['Board']['title']}</td>";  echo "</tr>";}?></table>［リスト5-20］<table><?php echo $this->Html->tableHeaders(  array('投稿者','タイトル'),  array('style'=>'color:#000066; background-color: #AAAAFF'),  array()); ?><?phpforeach($data as $record){  echo $this->Html->tableCells(array($record['Personal']['name'],      $record['Board']['title']),    array('style'=>'color:#000099; background-color: #CCCCFF'),    array('style'=>'color:#006600; background-color: #EEFFEE'),    false);}?></table>［リスト5-21］<table>  <tr style="color:#000066; background-color: #AAAAFF">    <th>投稿者</th>    <th>タイトル</th>  </tr>  <tr style="color:#000099; background-color: #CCCCFF">    <td>tuyano</td>    <td>こんにちは！</td>  </tr>  <tr style="color:#006600; background-color: #EEFFEE">    <td>sachiko</td>    <td>おはよう</td>  </tr>  <tr style="color:#000099; background-color: #CCCCFF">    <td>tuyano</td>    <td>おやすみ</td>  </tr>  ……以下、<tr>タグが続く……</table>［リスト5-22］<span style='font-size: 14pt; font-weight: 700;'><?php echo $this->Html->nestedList(  array('階層化されたリスト'=>    array('最初の項目',      '次の項目'=>array(        'サブ項目1','サブ項目2'),      '最後の項目'=>array(        'サブ項目A','サブ項目B'))),  array('style'=>'font-size: smaller; font-weight: lighter'),  array('style'=>'color: #006600'),  'ul'); ?></span>［リスト5-23］<span style='font-size: 14pt; font-weight: 700;'>  <ul style="font-size: smaller; font-weight: lighter">    <li style="color: #006600">階層化されたリスト      <ul style="font-size: smaller; font-weight: lighter">        <li style="color: #006600">最初の項目</li>        <li style="color: #006600">次の項目          <ul style="font-size: smaller; font-weight: lighter">            <li style="color: #006600">サブ項目1</li>            <li style="color: #006600">サブ項目2</li>          </ul>        </li>        <li style="color: #006600">最後の項目          <ul style="font-size: smaller; font-weight: lighter">            <li style="color: #006600">サブ項目A</li>            <li style="color: #006600">サブ項目B</li>          </ul>        </li>      </ul>    </li>  </ul></span>［リスト5-24］<?php$this->Html->addCrumb('First','one');$this->Html->addCrumb('Second','two');$this->Html->addCrumb('Last','end');echo $this->Html->getCrumbs(' | ','TOP');?>［リスト5-25］<a href="/cake/sample/">TOP</a> | <a href="/cake/sample/boards/one">First</a> | <a href="/cake/sample/boards/two">Second</a> | <a href="/cake/sample/boards/end">Last</a>［リスト5-26］<?php echo $this->Html->tag('span',  'これはHTMLヘルパーによる<span>タグの出力です。',  array('style'=>'color: #006600; font-weight: bold'),  true); ?>［リスト5-27］<span style="color: #006600; font-weight: bold">これはHTMLヘルパーによる<span>タグの出力です。</span>［リスト5-28］<?php echo $this->Html->tag('span',  htmlspecialchars('これはHTMLヘルパーによる<span>タグの出力です。'),  array('style'=>'color: #006600; font-weight: bold'),  true); ?>［リスト5-29］<a href="<?php echo $this->Html->url('/hello/test'); ?>">test</a>［リスト5-30］――生成されるソースコード<a href="/cake/sample/hello/test">test</a>［リスト5-31］<?php echo $this->Html->link('test', $this->Html->url('/hello/test'), array(), 'testに移動します。'); ?>［リスト5-32］――生成されるソースコード<a href="/cake/sample/cake/sample/hello/test" onclick="return confirm(&#039;testに移動します。&#039;);">test</a>［リスト5-33］――生成されるソースコード<a href="http://localhost/cake/sample/hello/test" onclick="return confirm(&#039;testに移動します。&#039;);">test</a>［リスト5-34］<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $uses = array('Board','Personal');  public $layout = 'hello';    public $paginate = array(    'page'=>1,    'conditions'=>array(),    'fields'=>array('id','title','content'),    'sort'=>'id',    'limit'=>5,    'direction'=>'desc',    'recursive'=>0  );    public function index(){    $data = $this->paginate();    $this->set('data',$data);  }}?>［リスト5-35］<table>  <?php  foreach($data as $record){    echo $this->Html->tableCells(      $record['Board'],      array('style'=>'color:#000099; background-color: #DDDDFF'),      array('style'=>'color:#006600; background-color: #DDFFDD'),      false    );  }  ?></table>［リスト5-36］<?php echo $this->Paginator->first('<<',array()); ?> | <?php echo $this->Paginator->prev('<',array()); ?> | <?php echo $this->Paginator->next('>',array()); ?> | <?php echo $this->Paginator->last('>>',array()); ?>［リスト5-37］<span>  <a href="/cake/sample/boards/index/page:1/direction:desc">&lt;&lt;</a></span> | <a href="/cake/sample/boards/index/page:2/direction:desc">&lt;</a> | <a href="/cake/sample/boards/index/page:4/direction:desc">&gt;</a> | <span><a href="/cake/sample/boards/index/page:10/direction:desc">&gt;&gt;</a>   </span>［リスト5-38］<?php echo $this->Paginator->numbers(); ?>［リスト5-39］<span><a href="/cake/sample/boards/index/page:1/direction:desc">1</a></span> | <span><a href="/cake/sample/boards/index/page:2/direction:desc">2</a></span> | <span class="current">3</span> | <span><a href="/cake/sample/boards/index/page:4/direction:desc">4</a></span> | <span><a href="/cake/sample/boards/index/page:5/direction:desc">5</a></span>［リスト5-40］<?php echo $this->Paginator->numbers(  array(    'before'=>$this->Paginator->first('<<') . '・',    'after'=>'・' . $this->Paginator->last('>>'),    'modulus'=>4,    'separator'=>'・'  )); ?>［リスト5-41］<span>  <a href="/cake/sample/boards/index/page:1/direction:desc">&lt;&lt;</a></span>・<span>  <a href="/cake/sample/boards/index/page:1/direction:desc">1</a></span>・<span>  <a href="/cake/sample/boards/index/page:2/direction:desc">2</a></span>・<span class="current">3</span>・<span>  <a href="/cake/sample/boards/index/page:4/direction:desc">4</a></span>・<span>  <a href="/cake/sample/boards/index/page:5/direction:desc">5</a></span>・<span>  <a href="/cake/sample/boards/index/page:10/direction:desc">&gt;&gt;</a></span>［リスト5-42］<?php echo $this->Paginator->numbers(  array(    'before'=>$this->Paginator->hasPrev() ? $this->Paginator->first('<<') . '・' : '',    'after'=>$this->Paginator->hasNext() ? '・' . $this->Paginator->last('>>') : '',    'modulus'=>4,    'separator'=>'・'  )); ?>［リスト5-43］<table>  <tr>    <th><?php echo $this->Paginator->sort('id','投稿順') ?></th>    <th><?php echo $this->Paginator->sort('title','タイトル') ?></th>    <th><?php echo $this->Paginator->sort('content','内容') ?></th>  </tr>    <?php  foreach($data as $record){    echo $this->Html->tableCells(      $record['Board'],      array('style'=>'color:#000099; background-color: #DDDDFF'),      array('style'=>'color:#006600; background-color: #DDFFDD'),      false);  }  ?></table>［リスト5-44］<table>  <tr>    <th>      <a href="/cake/sample/boards/index/sort:id/direction:asc"         class="desc">投稿順</a>    </th>    <th>      <a href="/cake/sample/boards/index/sort:title/direction:asc">タイトル</a>    </th>    <th>      <a href="/cake/sample/boards/index/sort:content/direction:asc">内容</a>    </th>  </tr>  ……以下略……［リスト5-45］<?php echo $this->Html->script('http://code.jquery.com/jquery.min.js', array('inline'=>false)); ?>［リスト5-46］public $helpers = array('Js');［リスト5-47］<?php$script =<<< EOLfunction testFunc(str){  alert(str);}EOL;echo $this->Html->scriptBlock($script,array('inline'=>false,'safe'=>true));?><a href="javascript:testFunc('Hello')">testFuncをcallする</a>［リスト5-48］<script type="text/javascript">//<![CDATA[function testFunc(str){  alert(str);}//]]></script>［リスト5-49］function testFunc(str){  alert(str);}［リスト5-50］<?php echo $this->Html->script('myscript',array('inline'=>false)); ?><a href="javascript:testFunc('Hello')">testFuncをcallする</a>［リスト5-51］<script type="text/javascript" src="/cake/sample/js/myscript.js"></script>［リスト5-52］<?php echo $this->Html->script('http://code.jquery.com/jquery.min.js', array('inline'=>false)); ?>［リスト5-53］public $helpers = array('js' => array('jquery'));［リスト5-54］<?php echo $this->Html->script('jquery',array('inline'=>false)); ?><?php$script =<<< EOLfunction testFunc(str){  alert("you clicked \""+ str + "\"!");}EOL;echo $this->Html->scriptBlock($script, array('inline'=>false));$this->Js->get('#click_div');$this->Js->event('click', 'testFunc("click_div")');echo $this->Js->writeBuffer();echo $this->Html->div(null,'Event Test!',    array('id' => 'click_div',    'style' => 'background-color:#aaffaa'));?>［リスト5-55］<!DOCTYPE html><html lang="ja"> <head>  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  <title>Boards  </title>  <link rel="stylesheet" type="text/css" href="/cake/sample/css/cake.hello.css" />  <script type="text/javascript" src="/cake/sample/js/jquery.js">  </script><script type="text/javascript">  //<![CDATA[  function testFunc(str){    alert("you clicked \""+ str + "\"!");  }  //]]>  </script></head><body>  <div id="container">    <div id="header">** Header **</div>    <div id="content">    <h1>Js Helper</h1>    <script type="text/javascript">    //<![CDATA[    $(document).ready(      function () {        $("#click_div").bind("click", function (event) {          testFunc("click_div")          return false;});});    //]]>    </script>    <div id="click_div" style="background-color:#aaffaa">Event Test!</div>    </div>    <div id="footer">** this is test. **</div>  </div></body></html>［リスト5-56］<?php echo $this->Html->script('jquery',array('inline'=>false)); ?><?php$script =<<< EOLfunction testFunc(id,str){  document.getElementById(id).innerHTML = str;}EOL;echo $this->Html->scriptBlock($script,array('inline'=>false));$this->Js->get('#event_div')->event('mouseover', 'testFunc("event_div","mouse Over!")', array('inline'=>false));$this->Js->get('#event_div')->event('mouseout', 'testFunc("event_div","mouse Out!")', array('inline'=>false));$this->Js->get('#event_div')->event('click', 'testFunc("event_div","mouse Click!")', array('inline'=>false));echo $this->Js->writeBuffer();echo $this->Html->div(null,'Mouse Over Event!', array('id'=>'event_div','style'=> 'background-color:#aaaaff'));?>［リスト5-57］――ヘッダー部分<<script type="text/javascript" src="/cake/sample/js/jquery.js"></script><script type="text/javascript">//<![CDATA[function testFunc(id,str){  document.getElementById(id).innerHTML = str;}//]]></script>［リスト5-58］――ボディ部分<script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#event_div").bind("mouseover",       function (event) {        testFunc("event_div","mouse Over!")        return false;});    $("#event_div").bind("mouseout",       function (event) {        testFunc("event_div","mouse Out!")        return false;});    $("#event_div").bind("click",       function (event) {        testFunc("event_div","mouse Click!")        return false;});  });//]]></script><div id="event_div" style="background-color:#aaaaff">Mouse Over Event!</div>［リスト5-59］$this->Js->get('#event_div')->event('mouseover', 'testFunc("event_div","mouse Over!")', array('inline'=>false));echo $this->Js->writeBuffer();$this->Js->get('#event_div')->event('mouseout', 'testFunc("event_div","mouse Out!")', array('inline'=>false));echo $this->Js->writeBuffer();$this->Js->get('#event_div')->event('click', 'testFunc("event_div","mouse Click!")', array('inline'=>false));echo $this->Js->writeBuffer();［リスト5-60］<script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#event_div").bind("mouseover",       function (event) {        testFunc("event_div","mouse Over!")      return false;});  });//]]></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#event_div").bind("mouseout",       function (event) {        testFunc("event_div","mouse Out!")        return false;});  });//]]></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#event_div").bind("click",       function (event) {        testFunc("event_div","mouse Click!")      return false;});  });//]]></script>［リスト5-61］<?php echo $this->Html->script('jquery',array('inline'=>false)); ?><?php$script =<<< EOLfunction testFunc(id,json){  var obj = JSON.parse(json);  var str = obj.name + "," + obj.age + "," + obj.mail;  document.getElementById(id).innerHTML = str;}EOL;$this->Html->scriptBlock($script,array('inline'=>false));?><?php echo $this->Html->div(null,'Mouse Click!',  array('id'=>'event_div','style'=>  'background-color:#aaaaff'),true) ?><?php$data = array("name"=>"Taro","age"=>28, "mail"=>"taro@mail.com");$json = $this->Js->object($data,array());$param = 'testFunc("event_div",JSON.stringify(' . $json . '))';$this->Js->get('#event_div') ->event('click',$param, array('inline'=>false));echo $this->Js->writeBuffer();?>［リスト5-62］<?phpclass HelloController extends AppController {  public $layout = 'hello';  public $helpers = array('Js' => array('Jquery'));    public function index(){    Configure::write('debug',0);  }  public function getAjax(){    $this->autoRender = false;    $this->uses = null;    Configure::write('debug',0);    echo '現在の日時：' . date('Y-m-d h:i:s');  }  }?>［リスト5-63］<?php echo $this->Html->script('jquery', array('inline'=>false)); ?><?php$this->Js->get('#ajax_div')->event('click',  $this->Js->request(    array('action' => 'getAjax'),    array('async' => true, 'update' => '#res_div')    ));echo $this->Js->writeBuffer();echo $this->Html->div(null,'This is Ajax Result.', array('id'=>'res_div'));echo $this->Form->button('Ajaxによる更新', array('id'=>'ajax_div')); ?>［リスト5-64］<script type="text/javascript" src="/cake/sample/js/jquery.js"></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#ajax_div").bind("click",       function (event) {        $.ajax({          async:true,           dataType:"html",           success: function (data, textStatus) {            $("#res_div").html(data);          },           url:"\/cake\/sample\/hello\/getAjax"});        return false;      });    });//]]></script><div id="res_div">This is Ajax Result.</div><button id="ajax_div" type="submit">Ajaxによる更新</button>［リスト5-65］<?php echo $this->Html->script('jquery', array('inline'=>false)); ?><?php$script =<<< EOLfunction testFunc(result){  alert(result.responseText);}EOL;echo $this->Html->scriptBlock($script,array('inline'=>true));$this->Js->get('#ajax_div')->event('click',  $this->Js->request(    array('action' => 'getAjax'),    array('async' => true, 'complete' => 'testFunc(XMLHttpRequest)')    ));echo $this->Js->writeBuffer();echo $this->Html->div(null,'This is Ajax Result.', array('id'=>'res_div'));echo $this->Form->button('Ajaxによる更新', array('id'=>'ajax_div')); ?>［リスト5-66］<script type="text/javascript">//<![CDATA[function testFunc(result){  alert(result.responseText);}//]]></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#ajax_div").bind("click", function (event) {      $.ajax({        async:true,         complete: function (XMLHttpRequest, textStatus) {          testFunc(XMLHttpRequest)},         url:"\/cake\/sample\/hello\/getAjax"});      return false;    });  });//]]></script>［リスト5-67］public function getAjax($day = 0, $hour = 0){  $this->autoRender = false;  $this->uses = null;  $t = time();  $t = $t + $day * (60 * 60 * 24) + $hour * (60 * 60);  Configure::write('debug',0);  echo '今から、' . $day . '日 ' . $hour . '時間後の日時：' . date('Y-m-d h:i:s',$t);}［リスト5-68］<?php$d = 10; // 日数$h = 10; // 時間数$script =<<< EOLfunction testFunc(result){  $('#res_div').html(result.responseText);}EOL;echo $this->Html->scriptBlock($script,array('inline'=>true));$this->Js->get('#ajax_div')->event('click',  $this->Js->request(    array('action' => 'getAjax',$d, $h),    array('async' => true, 'complete' => 'testFunc(XMLHttpRequest)')    ));echo $this->Js->writeBuffer();echo $this->Html->div(null,'This is Ajax Result.',  array('id'=>'res_div'));echo $this->Form->button('Ajaxによる更新',  array('id'=>'ajax_div')); ?>［リスト5-69］<script type="text/javascript">//<![CDATA[function testFunc(result){  $('#res_div').html(result.responseText);}//]]></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#ajax_div").bind("click", function (event) {      $.ajax({        async:true,         complete: function (XMLHttpRequest, textStatus) {          testFunc(XMLHttpRequest)        },         url:"\/cake\/sample\/hello\/getAjax\/10\/10"});      return false;    });  });//]]></script>［リスト5-70］public function getAjax(){  $this->autoRender = false;  $this->uses = null;  Configure::write('debug',0);  $pattern = $this->request->data['Post']['msg'];  if (empty($pattern)){ $pattern = 'Y/m/d H:i:s'; }  echo '現在の日時：' . date($pattern);}［リスト5-71］<?phpecho $this->Html->div(null,'This is Ajax Result.', array('id'=>'res_div'));echo $this->Form->create('Post');echo $this->Form->input('msg');echo $this->Js->submit('click', array('update' => '#res_div', 'url' => array('action' => 'getAjax')));echo $this->Form->end(null);echo $this->Js->writeBuffer();?><form action="/cake/sample/hello/index" id="PostIndexForm" method="post" accept-charset="utf-8">  <div style="display:none;">    <input type="hidden" name="_method" value="POST"/>  </div>  <div class="input text">    <label for="PostMsg">Msg</label>    <input name="data[Post][msg]" type="text" id="PostMsg"/>  </div>  <div class="submit">    <input  id="submit-762496503" type="submit" value="click"/>  </div></form><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#submit-762496503").bind("click",       function (event) {        $.ajax({          data:$("#submit-762496503").closest("form").serialize(),           dataType:"html",           success: function (data, textStatus) {            $("#res_div").html(data);          },           type:"post",           url:"\/cake\/sample\/hello\/getAjax"});        return false;      });  });//]]></script>  ［リスト5-73］public function getAjax(){  $this->autoRender = false;  $this->uses = null;  Configure::write('debug',0);  $pattern = 'Y-m-d H:i:s';  echo '現在の日時：' . date($pattern);}［リスト5-74］<?phpecho $this->Html->div(null,'This is Ajax Result.', array('id'=>'res_div'));echo $this->Js->link(    'please click!',    array('action' => 'getAjax'),  array('update'=>'#res_div'));echo $this->Js->writeBuffer();?>［リスト5-75］<a href="/cake/sample/hello/getAjax" id="link-1108526572">please click! </a><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#link-1795931514").bind("click",       function (event) {        $.ajax({          dataType:"html",           success: function (data, textStatus) {            $("#res_div").html(data);          },           url:"\/cake\/sample\/hello\/getAjax"});        return false;      });  });//]]></script>［リスト5-76］<?php echo $this->Html->script('jquery', array('inline'=>false)); ?><?phpecho $this->Html->div(null,'This is Ajax Result.', array('id'=>'res_div'));$this->Js->get('#res_div')->event('click',  $this->Js->alert('アラートです。'));echo $this->Js->writeBuffer(array('inline'=>false));?>［リスト5-77］<script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#res_div").bind("click",       function (event) {        alert("\u30a2\u30e9\u30fc\u30c8\u3067\u3059\u3002");        return false;    });  });//]]></script>［リスト5-78］<?php echo $this->Html->script('jquery', array('inline'=>false)); ?><?phpecho $this->Html->div(null,'message.',array('id'=>'msg'));$this->Js->get('#msg')->event('click',  $this->Js->alert('アラートです。'));echo $this->Js->writeBuffer(array('inline'=>false));?>［リスト5-79］――コントローラ側の修正public $helpers = array('js' => array('prototype'));［リスト5-80］――テンプレート側の修正echo $this->Html->script('prototype');［リスト5-81］――jQueryの場合<script type="text/javascript" src="/cake/sample/js/jquery.js"></script><script type="text/javascript">//<![CDATA[$(document).ready( function () {  $("#res_div").bind("click", function (event) {    var _confirm = confirm("\u30a2\u30e9\u30fc\u30c8\u3067\u3059\u3002");    if (!_confirm) {      return false;    }    return false;  });});//]]></script>［リスト5-82］――prototypeの場合<script type="text/javascript" src="/cake/sample/js/prototype.js"></script><script type="text/javascript">//<![CDATA[document.observe("dom:loaded", function (event) {  $("msg").observe("click", function (event) {    event.stop();    alert("\u30a2\u30e9\u30fc\u30c8\u3067\u3059\u3002");  });});//]]></script>［リスト5-83］<?php echo $this->Html->script('jquery',array('inline'=>false)); ?><?php$eventCode = $this->Js->get('#img')->effect('fadeOut');$this->Js->get('#img')->event('click', $eventCode);$eventCode = $this->Js->get('#img')->effect('fadeIn');$this->Js->get('#msg')->event('click', $eventCode);echo $this->Js->writeBuffer(array('inline'=>false));?><?php echo $this->Html->div(null,'message.',array('id'=>'msg')); ?><?php echo $this->Html->image('sample.jpg',array('id'=>'img')); ?>［リスト5-84］――ヘッダー部分<script type="text/javascript" src="/cake/sample/js/jquery.js"></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#img").bind("click",       function (event) {        $("#img").fadeOut();        return false;      });    $("#msg").bind("click",       function (event) {        $("#img").fadeIn();        return false;      });  });//]]></script>［リスト5-85］――ボディ部分<div id="msg">message.</div><img src="/cake/sample/img/sample.jpg" id="img" alt="" />［リスト5-86］<?php echo $this->Html->css('http://code.jquery.com/ui/1.8.20/themes/base/jquery-ui.css'); ?><?php echo $this->Html->script('http://code.jquery.com/jquery.min.js', array('inline'=>false)); ?><?php echo $this->Html->script('http://code.jquery.com/ui/1.8.20/jquery-ui.min.js', array('inline'=>false)); ?>［リスト5-87］<link rel="stylesheet" type="text/css" href="http://code.jquery.com/ui/1.8.20/themes/base/jquery-ui.css" /><script type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script><script type="text/javascript" src="http://code.jquery.com/ui/1.8.20/jquery-ui.min.js"></script>［リスト5-88］<?php echo $this->Html->script('http://code.jquery.com/jquery.min.js', array('inline'=>false)); ?><?php echo $this->Html->script('http://code.jquery.com/ui/1.8.20/jquery-ui.min.js', array('inline'=>false)); ?><?php$this->Js->get('#msg')->drag(array('opacity'=>0.5));echo $this->Js->writeBuffer();?><?php echo $this->Html->div(null,'message.',array('id'=>'msg', 'style'=>'width:100px; height:100px; background:#AAA;')); ?>［リスト5-89］<!-- ヘッダーに表示される --><script type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script><script type="text/javascript" src="http://code.jquery.com/ui/1.8.20/jquery-ui.min.js"></script><!--ボディに表示される --><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#msg").draggable({opacity:0.50000000000});  });//]]></script><div id="msg" style="width:100px; height:100px; background:#AAA;">message.</div>［リスト5-90］<?php echo $this->Html->script('http://code.jquery.com/jquery.min.js', array('inline'=>false)); ?><?php echo $this->Html->script('http://code.jquery.com/ui/1.8.20/jquery-ui.min.js', array('inline'=>false)); ?><?php$drop_event = '$(this).css("background-color",ui.draggable.css("background-color"));$(this).text(ui.draggable.text())';    $this->Js->get('.drag')->drag(array('opacity'=>0.5));$this->Js->get('.drop')->drop(array('drop'=>$drop_event));echo $this->Js->writeBuffer(array('inline'=>false));?><?php echo $this->Html->div('drop','drop.',array('id'=>'blue', 'style'=>'position:absolute; top: 200px; left: 300px; width:200px; height:200px; background:#AAA;')); ?><?php echo $this->Html->div('drag','red.',array('id'=>'red', 'style'=>'width:100px; height:100px; background:#F66;')); ?><?php echo $this->Html->div('drag','green.',array('id'=>'green', 'style'=>'width:100px; height:100px; background:#9F9;')); ?><?php echo $this->Html->div('drag','blue.',array('id'=>'blue', 'style'=>'width:100px; height:100px; background:#33F;')); ?>［リスト5-91］<!-- ヘッダーに表示される --><script type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script><script type="text/javascript" src="http://code.jquery.com/ui/1.8.20/jquery-ui.min.js"></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $(".drag").draggable({opacity:0.50000000000});    $(".drop").droppable({drop: function (event, ui){      $(this).css("background-color",ui.draggable.css("background-color"));      $(this).text(ui.draggable.text())    }  });});//]]></script><!-- ボディに表示される --><div id="blue" style="position:absolute; top: 200px; left: 300px; width:200px; height:200px; background:#AAA;" class="drop">drop.</div><div id="red" style="width:100px; height:100px; background:#F66;" class="drag">red.</div><div id="green" style="width:100px; height:100px; background:#9F9;" class="drag">green.</div><div id="blue" style="width:100px; height:100px; background:#33F;" class="drag">blue.</div>［リスト5-92］<?php echo $this->Html->script('http://code.jquery.com/jquery.min.js', array('inline'=>false)); ?><?php echo $this->Html->script('http://code.jquery.com/ui/1.8.20/jquery-ui.min.js', array('inline'=>false)); ?><?php$this->Js->get('#list')->sortable();echo $this->Js->(array('inline'=>false));?><?php$style = $this->Html->style(array('background'=>'#FCC','margin'=>'3px','width'=>'300px'));$list = $this->Html->div(null,'message1',array('style'=>$style));$list .= $this->Html->div(null,'message2',array('style'=>$style));$list .= $this->Html->div(null,'message3',array('style'=>$style));echo $this->Html->div(null,$list,array('id'=>'list'));?>［リスト5-93］<!-- ヘッダーに表示される --><script type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script><script type="text/javascript" src="http://code.jquery.com/ui/1.8.20/jquery-ui.min.js"></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#list").sortable({});  });//]]></script><!-- ボディに表示される --><div id="list">  <div style="background:#FCC; margin:3px; width:300px;">message1</div>  <div style="background:#FCC; margin:3px; width:300px;">message2</div>  <div style="background:#FCC; margin:3px; width:300px;">message3</div></div>［リスト5-94］<?php echo $this->Html->css('http://code.jquery.com/ui/1.8.20/themes/base/jquery-ui.css'); ?><?php echo $this->Html->script('http://code.jquery.com/jquery.min.js', array('inline'=>false)); ?><?php echo $this->Html->script('http://code.jquery.com/ui/1.8.20/jquery-ui.min.js', array('inline'=>false)); ?><?php$change = "$('#val').text(ui.value)";$this->Js->get('#slider')->slider(array('min'=>0,'max'=>100,'step'=>5,'slide'=>$change));echo $this->Js->writeBuffer(array('inline'=>false));?><?phpecho $this->Html->div(null,'value',array('id'=>'val','style'=>'font-size:18pt;'));echo $this->Html->div(null,'',array('id'=>'slider','style'=>'width:300px;'));?>［リスト5-95］<!-- ヘッダーに表示される --><script type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script><script type="text/javascript" src="http://code.jquery.com/ui/1.8.20/jquery-ui.min.js"></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    $("#slider").slider({max:100, min:0,       slide: function (event, ui)         {$('#val').text(ui.value)}, step:5});    });//]]></script><!--ボディに表示される --><link rel="stylesheet" type="text/css" href="http://code.jquery.com/ui/1.8.20/themes/base/jquery-ui.css" /><div id="val" style="font-size:18pt;">value</div><div id="slider" style="width:300px;"></div>［リスト5-96］<?php echo $this->Html->script('http://code.jquery.com/jquery.min.js', array('inline'=>false)); ?><?php echo $this->Html->script('http://code.jquery.com/ui/1.8.20/jquery-ui.min.js', array('inline'=>false)); ?><?php$n = 1;$this->Js->get('div.item');$script = "var n = 1;" . $this->Js->each('$(this).css({margin:"2px", color: "red", background:"#FAA", width:n++ * 50 + "px"});');$this->Js->buffer($script);echo $this->Js->writeBuffer(array('inline'=>false));?><?phpecho $this->Html->div('item','value',array('style'=>'font-size:18pt;'));echo $this->Html->div('item','value',array('style'=>'font-size:18pt;'));echo $this->Html->div('item','value',array('style'=>'font-size:18pt;'));echo $this->Html->div('item','value',array('style'=>'font-size:18pt;'));echo $this->Html->div('item','value',array('style'=>'font-size:18pt;'));?>［リスト5-97］<script type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script><script type="text/javascript" src="http://code.jquery.com/ui/1.8.20/jquery-ui.min.js"></script><script type="text/javascript">//<![CDATA[$(document).ready(  function () {    var n = 1;    $("div.item").each( function () {      $(this).css({        margin:"2px",         color: "red",         background:"#FAA",         width:n++ * 50 + "px"      });    });  });//]]></script>［リスト5-98］<?php echo $this->Html->script('http://code.jquery.com/jquery.min.js',array('inline'=>false)); ?><?php$this->Js->get('#item1')->event('click','calc(10);');$this->Js->get('#item2')->event('click','calc(20);');$this->Js->get('#item3')->event('click','calc(30);');$script = "calc(n){var total = 0;for(var i = 1;i <= n;i++){total += i;} alert(total);}";$this->Js->buffer($script);$script_arr = $this->Js->getBuffer(false);echo $this->Js->writeBuffer();?><?phpecho $this->Html->div('item','10',array('id'=>'item1','style'=>'font-size:18pt;'));echo $this->Html->div('item','20',array('id'=>'item2','style'=>'font-size:18pt;'));echo $this->Html->div('item','30',array('id'=>'item3','style'=>'font-size:18pt;'));?><pre><?php print_r($script_arr); ?></pre>［リスト5-99］Array(  [0] => $("#item1").bind("click", function (event) {calc(10);return false;});  [1] => $("#item2").bind("click", function (event) {calc(20);return false;});  [2] => $("#item3").bind("click", function (event) {calc(30);return false;});  [3] => function calc(n){var total = 0;for(var i = 1;i <= n;i++){total += i;} alert(total);})［リスト5-100］<script type="text/javascript">//<![CDATA[$(document).ready( function () {$("#item1").bind("click", function (event) {calc(10); return false;});$("#item2").bind("click", function (event) {calc(20); return false;});$("#item3").bind("click", function (event) {calc(30); return false;});function calc(n){var total = 0;for(var i = 1;i <= n;i++){total += i;} alert(total);}});//]]></script>［リスト5-101］<?php$res = $this->Text->autoLink("please check http://google.com/ .",array());echo $this->Html->para(null,$res,array());?>［リスト5-102］<p>please check <a href="http://google.com/">http://google.com/</a> .</p［リスト5-103］<?php$str = "<p>please check <a href=\"http://google.com/\">http://homepage.mac.com/tuyano/</a> .</p>";echo $this->Text->stripLinks ($str);?>［リスト5-104］<p>please check http://homepage.mac.com/tuyano/ .</p>［リスト5-105］<?php$str = "これは、長いテキストの中から一部だけを抜粋して表示するサンプルです。";echo $this->Text->truncate($str, 21); ?>［リスト5-106］<style type="text/css">span.highlight { color:white; background:blue; }</style>［リスト5-107］<?php$str = "テキストの一部をハイライト表示します。";$hstr = $this->Text->highlight($str,"ハイライト");echo $this->Html->para('p',$hstr);?>［リスト5-108］<p class="p">テキストの一部を<span class="highlight">ハイライト</span>表示します。</p>［リスト5-109］<?php$str = "12345.6789";echo $this->Number->format($str,array('places'=>2,'before'=>'$', 'decimals'=>'-','thousands'=>','));?>［リスト5-110］<?phpecho $this->Number->precision(1234.5678,2);echo "<br />";echo $this->Number->toPercentage(1234.5678,2);?>［リスト5-111］<?phpecho $this->Number->currency('1234.56', 'USD');echo "<br />";echo $this->Number->currency('1234.56', '￥');?>［リスト5-112］<?phpecho $this->Number->toReadableSize(12345678);?>［リスト5-113］<?php echo $this->Time->fromString('1999-12-24'); ?>［リスト5-114］<pre><?phpecho $this->Time->nice('1999-12-24') ."\n";echo $this->Time->niceShort('1999-12-24') ."\n";echo $this->Time->toAtom('1999-12-24') ."\n";echo $this->Time->toRSS('1999-12-24') ."\n";?></pre>［リスト5-115］<?php echo $time->dayAsSql('1999-12-24',"Board.date"); ?>［リスト5-116］(Board.date >= '1999-12-24 00:00:00') AND (Board.date <= '1999-12-24 23:59:59')［リスト5-117］<pre><?php print_r($this->Time->toQuarter('1999-12-24',true)) ?></pre>［リスト5-118］<?php echo $this->Time->timeAgoInWords('2012-2-24', array('format'=>'Y-m-d','end'=>'+5 year')); ?>［リスト5-119］<?php$w = '1 years';$d = '2012-1-1';echo $this->Time->wasWithinLast($w,$d) ?  "今日は、" . $d . "から" . $w . "以内です。" :  "範囲外！";?>［リスト5-120］public $helpers = array('Rss');public $components = array('RequestHandler');  ［リスト5-121］public function index(){  $data = $this->Board->find('all',array('limit' => 10));  $this->layout = "rss";  $this->set('data',$data);}［リスト5-122］――rss.ctp<?phpif (!isset($channel)) {  $channel = array();}if (!isset($channel['title'])) {  $channel['title'] = $title_for_layout;}echo $this->Rss->document(  $this->Rss->channel(    array(), $channel, $content_for_layout  ));?>［リスト5-123］――index.ctp<?php$channel = array (  'title' => '掲示板',  'link' => array('controller' => 'boards', 'action' => 'show', 'ext' => 'rss'),  'guid' => array('controller' => 'boards', 'action' => 'show', 'ext' => 'rss'),  'description' => '掲示板の投稿一覧です。',  'pubDate' => '投稿日時');$this->set('channel',$channel);echo $this->Rss->items($data, 'transformRSS');public function transformRSS($data) {  return array(    'title' => $data['Board']['title'],    'link' => array('action' => 'show', $data['Board']['id']),    'guid' => array('action' => 'show', $data['Board']['id']),    'description' => $data['Board']['content'],    'pubDate' => null  );}?>［リスト6-1］・ユーザテーブルの作成CREATE TABLE `mydata`.`Users` (  `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,  `username` VARCHAR( 50 ) NOT NULL ,  `password` VARCHAR( 50 ) NOT NULL) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;［リスト6-2］<?phpclass UsersController extends AppController {  public $name = 'Users';  public $components = array('Auth');    public function login() {}  public function logout() {}  }?>［リスト6-3］――login.ctp<?phpif ($this->Session->check('Message.auth'))echo $this->Session->flash('auth');echo $this->Form->create('User', array('action' => 'login'));echo $this->Form->input('username');echo $this->Form->input('password');echo $this->Form->end('Login');?>［リスト6-4］――logout.ctp<?php echo $this->Html->tag('h3','ログアウトしました。'); ?>［リスト6-5］――BoardsController.php<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $uses = array('Board','Personal');  public $components = array('Auth');    public function index(){    $data = $this->Board->find('all',array('order'=>'Board.id desc'));    $this->set('data',$data);  }}?>［リスト6-6］――Boards/index.ctp<h1>掲示板</h1><br /><a href="/cake/sample/boards/add">※投稿する</a><br /><br /><table><tr><th>投稿者</th><th>タイトル</th></tr><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i];  echo "<tr>";  echo "<td><a href='/cake/sample/boards/show2/{$arr['Personal']['id']}'> {$arr['Personal']['name']}</a></td>";  echo "<td><a href='/cake/sample/boards/show/{$arr['Board']['id']}'> {$arr['Board']['title']}</a></td>";  echo "</tr>";}?></table>［リスト6-7］<h3>add users</h3><?phpecho $this->Form->create('User', array('action' => 'add'));echo $this->Form->input('username');echo $this->Form->input('password');echo $this->Form->end('Add');?>［リスト6-8］public function add(){  if (!empty($this->data)){    if ($this->data) {      $this->User->create();      $this->User->save($this->data);      $this->redirect(array('action'=>'login'));    }  }}［リスト6-9］public function beforeFilter(){  $this->Auth->allow('add');  $this->Auth->allow('logout');}［リスト6-10］<?phpclass User extends AppModel {  public function beforeSave() {    $this->data['User']['password'] =       AuthComponent::password($this->data['User']['password']);    return true;  }  }?>［リスト6-11］public function login(){  if ($this->request->isPost()) {  if ($this->Auth->login()) {      $this->redirect($this->Auth->redirect());  } else {      $this->Session->setFlash('ユーザ名かパスワードが違います。', 'default', array(), 'auth');  }    }}［リスト6-12］public function logout() {  $this->Auth->logout();  //return $this->redirect(array('action'=>'index','controller'=>'Boards')); // ★}  ［リスト6-13］public $components = array(  'Auth'=>array(    'authError'=>'ログインしてください。'));［リスト6-14］public $components = array(  'Auth'=>array(    'authError'=>'ログインしてください。',    $this->Auth->loginError = "ログインに失敗しました。"));［リスト6-15］public function beforeFilter(){  $this->Auth->allow('add');  //$this->Auth->allow('logout');  $this->Auth->authError = "あなたはログインしていません。";  $this->Auth->loginError = "ログインに失敗しました。";}［リスト6-16］――コントローラのindexpublic function index(){  $this->set('data',$this->Auth->user());}［リスト6-17］――index.ctp<pre><?php print_r($data); ?></pre>［リスト6-18］// beforeFilterを以下に修正public function beforeFilter(){  $this->Auth->authError = "あなたはログインしていません。";  $this->Auth->authorize = 'controller';}public function isAuthorized() {  $this->Session->setFlash(    'ログインしています。(ユーザ名: ' .    $this->Auth->user('username') . ')', true);  return true;}［リスト6-19］Configure::write('Acl.classname', 'DbAcl');Configure::write('Acl.database', 'default');［リスト6-20］cd c:\xampp\phpset path=%path%;%cd%cd C:\xampp\htdocs\cake\sample\app\consoleset path=%path%;%cd%［リスト6-21］cd C:\xampp\htdocs\cake\sample\app［リスト6-22］Welcome to CakePHP v2.1.3 Console---------------------------------------------------------------App : appPath: C:\xampp\htdocs\cake\sample\app\---------------------------------------------------------------Cake Schema Shell---------------------------------------------------------------Generating Schema...Schema file: schema.php generated［リスト6-23］CREATE TABLE IF NOT EXISTS `acos` (  `id` int(10) NOT NULL AUTO_INCREMENT,  `parent_id` int(10) DEFAULT NULL,  `model` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,  `foreign_key` int(10) DEFAULT NULL,  `alias` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,  `lft` int(10) DEFAULT NULL,  `rght` int(10) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;［リスト6-24］CREATE TABLE IF NOT EXISTS `aros` (  `id` int(10) NOT NULL AUTO_INCREMENT,  `parent_id` int(10) DEFAULT NULL,  `model` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,  `foreign_key` int(10) DEFAULT NULL,  `alias` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,  `lft` int(10) DEFAULT NULL,  `rght` int(10) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;［リスト6-25］CREATE TABLE IF NOT EXISTS `aros_acos` (  `id` int(10) NOT NULL AUTO_INCREMENT,  `aro_id` int(10) NOT NULL,  `aco_id` int(10) NOT NULL,  `_create` varchar(2) COLLATE utf8_unicode_ci NOT NULL DEFAULT '0',  `_read` varchar(2) COLLATE utf8_unicode_ci NOT NULL DEFAULT '0',  `_update` varchar(2) COLLATE utf8_unicode_ci NOT NULL DEFAULT '0',  `_delete` varchar(2) COLLATE utf8_unicode_ci NOT NULL DEFAULT '0',  PRIMARY KEY (`id`),  UNIQUE KEY `ARO_ACO_KEY` (`aro_id`,`aco_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;［リスト6-26］public function makeARO(){  $aro =new Aro();  $groups = array(    1 => array('alias' => 'admin'),    2 => array('alias' => 'member'),    3 => array('alias' => 'guest')  );  foreach($groups as $data){    $aro->create();    $aro->save($data);  }}［リスト6-27］public function makeARO2(){  $aro = new Aro();  $users = array(    1 => array('alias' => 'tuyano','parent_id' => 1),    2 => array('alias' => 'taro','parent_id' => 2),    3 => array('alias' => 'hanako','parent_id' => 3)  );  foreach($users as $data){    $aro->create();    $aro->save($data);  }}［リスト6-28］public function makeACO(){  $aco =new Aco();  $groups = array(    1 => array('alias' => 'board'),    2 => array('alias' => 'personal')  );  foreach($groups as $data){    $aco->create();    $aco->save($data);  }}［リスト6-29］public function makePermission(){  $this->Acl->allow('admin','board');  $this->Acl->allow('member','board');  $this->Acl->deny('member','board','create');  $this->Acl->deny('member','board','delete');  $this->Acl->deny('guest','board');  $this->Acl->allow('guest','board','read');}［リスト6-30］mysql> select * from acos;+----+-----------+-------+-------------+----------+------+------+| id | parent_id | model | foreign_key | alias    | lft  | rght |+----+-----------+-------+-------------+----------+------+------+|  1 |      NULL | NULL  |        NULL | board    |    1 |    2 ||  2 |      NULL | NULL  |        NULL | personal |    3 |    4 |+----+-----------+-------+-------------+----------+------+------+2 rows in set (0.01 sec)［リスト6-31］mysql> select * from aros;+----+-----------+-------+-------------+--------+------+------+| id | parent_id | model | foreign_key | alias  | lft  | rght |+----+-----------+-------+-------------+--------+------+------+|  1 |      NULL | NULL  |        NULL | admin  |    1 |    4 ||  2 |      NULL | NULL  |        NULL | member |    5 |    8 ||  3 |      NULL | NULL  |        NULL | guest  |    9 |   12 ||  4 |         1 | NULL  |        NULL | tuyano |    2 |    3 ||  5 |         2 | NULL  |        NULL | taro   |    6 |    7 ||  6 |         3 | NULL  |        NULL | hanako |   10 |   11 |+----+-----------+-------+-------------+--------+------+------+6 rows in set (0.01 sec)［リスト6-32］mysql> select * from aros_acos;+----+--------+--------+---------+-------+---------+---------+| id | aro_id | aco_id | _create | _read | _update | _delete |+----+--------+--------+---------+-------+---------+---------+|  1 |      1 |      1 | 1       | 1     | 1       | 1       ||  2 |      2 |      1 | -1      | 1     | 1       | -1      ||  3 |      3 |      1 | -1      | 1     | -1      | -1      |+----+--------+--------+---------+-------+---------+---------+3 rows in set (0.00 sec)［リスト6-33］public $components = array('Auth','Acl');［リスト6-34］<?phpclass BoardsController extends AppController {  public $name = 'Board';  public $uses = array('Board','Personal');  public $components = array('Auth','Acl');  private $acl_check = false;    public function index(){    if ($this->acl_check){      $data = $this->Board->find('all',array('order'=>'Board.id desc'));      $this->set('data',$data);    } else {      $this->set('data',null);    }  }  public function beforeFilter(){    $uname = $this->Auth->user('username');    $act = $this->action;    $act = $act == 'index' ? 'read' : $act;    $act = $act == 'show' ? 'read' : $act;    $act = $act == 'show2' ? 'read' : $act;    $act = $act == 'add' ? 'create' : $act;    $act = $act == 'edit' ? 'update' : $act;    $act = $act == 'del' ? 'delete' : $act;        if ($this->Acl->check($uname, 'board',$act)){      // アクセスできる場合の処理      $this->acl_check = true;      $this->Session->setFlash(__($uname . ':' . $act .          ':アクセスできます。', true));    } else {      // アクセスできない場合の処理      $this->acl_check = false;      $this->Session->setFlash(__($uname . ':' . $act .          ':アクセスできません！', true));    }  }}?>［リスト6-35］$this->Session->SetFlash('これがメッセージだ!');［リスト6-36］――コントローラ側で値を保存public function index(){  $this->Session->write('MyData.msg','保管したデータ');}［リスト6-37］――ビュー側で値を取り出す<h1>session sample</h1><hr/><pre><?php echo $this->Session->read('MyData.msg'); ?></pre><hr/>［リスト6-38］――コントローラのメソッドpublic $components = array('Cookie');  public function index(){  $data = $this->Cookie->read('mykey');  $this->set('data',$data);}public function write(){  $val = $this->request->query['val'];  $this->Cookie->write('mykey',$val);  $this->redirect('index');  }［リスト6-39］――index.ctp<h1>cookie sample</h1><hr/><pre><?php print_r($data); ?></pre><hr/>［リスト6-40］class EmailConfig {  public $default = array(    'transport' => 'Mail',    'from' => 'you@localhost',    //'charset' => 'utf-8',    //'headerCharset' => 'utf-8',  );  public $smtp = array(    'transport' => 'Smtp',    'from' => array('site@localhost' => 'My Site'),    'host' => 'localhost',    'port' => 25,    'timeout' => 30,    'username' => 'user',    'password' => 'secret',    'client' => null,    'log' => false,    //'charset' => 'utf-8',    //'headerCharset' => 'utf-8',  );  public $fast = array(    ……略……  );}［リスト6-41］public $smtp = array(  'host' => 'ssl://smtp.gmail.com',  'transport' => 'Smtp',  'port' => 465,  'username' => '…ここにGmailのメールアドレスを書く…',  'password' => '…ここにパスワードを書く…',  'from' => array('…送信元のアドレス…' => '…表示名…'),  'timeout' => 30,  'client' => null,  'log' => false,);［リスト6-42］extension=php_openssl.dll［リスト6-43］public $components = array('Email');  public function index(){  $title = "テスト送信メール";  $msg = 'これは、Emailコンポーネントでメールを送信するサンプルです。' .     'このように長いテキストもメールとして送信することができます。' ;      $email = new CakeEmail('smtp');  $email->to('…送信先のアドレスを指定…')    ->emailFormat('text')    ->subject($title)    ->send($msg);}［リスト6-44］public function beforeFilter(){  $this->Security->blackHoleCallback = "error";}public function error(){  $mail = new CakeEmail('smtp');  $mail->to('syoda@tuyano.com')    ->emailFormat('text')    ->subject('Security Error!')    ->send('Security Errorが発生しました。');    echo "<html><head><title>ERROR</title></head>";  echo "<body>SECURITY ERROR!!!</body></html>";  exit;}［リスト6-45］public function beforeFilter(){  $this->Security->blackHoleCallback = "error";  $this->Security->requirePost('index');}［リスト6-46］public function parentNode(){  if (!$this->id) {    return null;  }  $data = $this->read();    return [$dataの親IDの値];  }}［リスト6-47］public function getNode($id){  $this->User->id = $id;  return $this->User->node();}［リスト6-48］Array(  [0] => Array  (    [Aro] => Array    (      [id] => 1      [parent_id] =>      [model] => user      [foreign_key] => 101      [alias] => admin    )  ))［リスト6-49］public function getPermission($id,$model,$act){  $this->User->id = $id;  $node = $this->User->node();  return $this->Acl->check($node[0]['Aro']['alias'],$model,$act);}［リスト6-50］CREATE TABLE `mydata`.`next_boards` (  `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,  `parent_id` INT NOT NULL DEFAULT '0',  `personal_id` INT NOT NULL ,  `title` VARCHAR( 255 ) NOT NULL ,  `content` VARCHAR( 255 ) NOT NULL ,  `lft` INT NOT NULL ,  `rght` INT NOT NULL) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;［リスト6-51］<?phpclass NextBoard extends AppModel {  public $name = 'NextBoard';  public $actsAs = array('Tree');      public $belongsTo = array(    "Personal" => array(      'className' => 'Personal',      'conditions' => '',      'order' => '',      'dependent' => false,      'foreignKey' => 'personal_id'    )  );}?>［リスト6-52］<?phpclass NextBoardsController extends AppController {  public $name = 'NextBoards';  public $uses = array('NextBoard','Personal');  public $scaffold;}?>［リスト6-53］public function show($id){  if (empty($id)){    $this->getTreeBoard(0);  } else {    $this->getTreeBoard($id);  }}public function getTreeBoard($id) {  if ($id != 0) {    $data = $this->NextBoard->find('all', array('conditions'=>array('NextBoard.id'=>$id)));    $this->set('data', $data);    if (!empty($data)) {      $child = $this->NextBoard->children($id,true);      $this->set('child', $child);    }  } else {      $child = $this->NextBoard->find('all', array('conditions'=>array('NextBoard.parent_id=0')));      $this->set('child', $child);        }}［リスト6-54］<h1>掲示板</h1><br /><a href="/cake/sample/next_boards/index">※一覧に戻る</a><br /><br /><br /><table><?phpif (!empty($data)){  echo "<tr><th>ID</th><th>NAME</th><th>TITLE</th></tr>";  foreach($data as $rec){    echo "<tr><td>{$rec['NextBoard']['id']}</td>";    echo "<td>{$rec['Personal']['name']}</td>";    echo "<td>{$rec['NextBoard']['title']}</td></tr>";  }}?></table><table><?phpif (!empty($child)){  echo "<tr><th>ID</th><th>TITLE</th></tr>";  foreach($child as $rec){    echo "<tr><td>{$rec['NextBoard']['id']}</td>";    echo "<td>{$rec['NextBoard']['title']}</td></tr>";  }}?></table>［リスト6-55］public $actsAs = array('Tree','Containable');［リスト6-56］<h1>掲示板</h1><br /><br /><?php debug($data) ?>［リスト6-57］public function index(){  $data = $this->NextBoard->find('all');  $this->set('data',$data);}［リスト6-58］public function index(){  $this->NextBoard->contain();  $data = $this->NextBoard->find('all');  $this->set('data',$data);}［リスト6-59］public function index(){  $this->NextBoard->contain(array('Personal'));  $data = $this->NextBoard->find('all');  $this->set('data',$data);}［リスト6-60］public function index(){  $this->NextBoard->contain(array('Personal.id','Personal.name'));  $data = $this->NextBoard->find('all');  $this->set('data',$data);}［リスト6-61］public function index(){  $this->NextBoard->contain(array('Personal.name = "tuyano"'));  $data = $this->NextBoard->find('all');  $this->set('data',$data);}［リスト6-62］function index(){  $this->NextBoard->contain(array('Personal.name = "tuyano"',    'Personal.id','Personal.name'));  $data = $this->NextBoard->find('all');  $this->set('data',$data);}［リスト6-63］CREATE TABLE IF NOT EXISTS `i18n` (  `id` int(10) NOT NULL auto_increment,  `locale` varchar(6) collate utf8_unicode_ci NOT NULL,  `model` varchar(255) collate utf8_unicode_ci NOT NULL,  `foreign_key` int(10) NOT NULL,  `field` varchar(255) collate utf8_unicode_ci NOT NULL,  `content` text collate utf8_unicode_ci,  PRIMARY KEY  (`id`),  KEY `locale` (`locale`),  KEY `model` (`model`),  KEY `row_id` (`foreign_key`),  KEY `field` (`field`)) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;［リスト6-64］public $actsAs = array('Translate'=>array('title','content'));［リスト6-65］public function beforeFilter(){  $this->Board->locale ='en';}［リスト6-66］――BoardsController.phpのindexメソッドpublic function index(){  $data = $this->Board->find('all',array('order'=>'Board.id desc'));  $this->set('data',$data);}［リスト6-67］――View/Boards/index.ctp<h1>掲示板</h1><br /><a href="/cake/sample/boards/add">※投稿する</a><br /><br /><table><tr><th>投稿者</th><th>タイトル</th></tr><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i];  echo "<tr>";  echo "<td><a href='/cake/sample/boards/show2/{$arr['Personal']['id']}'>    {$arr['Personal']['name']}</a></td>";  echo "<td><a href='/cake/sample/boards/show/{$arr['Board']['id']}'>    {$arr['Board']['title']}</a></td>";  echo "</tr>";}?></table>［リスト6-68］$this->Board->locale ='jpn';［リスト7-1］<?phpclass RgbTextHelper extends AppHelper {  public function __construct(View $view, $settings = array()) {    parent::__construct($view, $settings);    //debug($settings);  }  public function redString($str){    return $this->output("<span style=\"background-color:#FF0000;color:#FFFFFF\">  $str</span>");  }  public function greenString($str){    return $this->output("<span style=\"background-color:#00FF00;color:#FFFFFF\">  $str</span>");  }  public function blueString($str){    return $this->output("<span style=\"background-color:#0000FF;color:#FFFFFF\">  $str</span>");  }}?>［リスト7-2］public $helpers = array('RgbText');［リスト7-3］――BoardsControllerクラスのindexメソッドpublic function index(){  $data = $this->Board->find('all',array('order'=>'Board.id desc'));  $this->set('data',$data);}［リスト7-4］――View/Boards/index.ctpの修正<h1><?php echo $this->RgbText->redString('掲示板'); ?></h1><br /><a href="/cake/sample/boards/add">  <?php echo $this->RgbText->greenString('※投稿する'); ?></a><br /><br /><table><tr><th>投稿者</th><th>タイトル</th></tr><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i];  echo "<tr>";  echo "<td><a href='/cake/sample/boards/show2/{$arr['Personal']['id']}'>{$arr['Personal']['name']}</a></td>";  echo "<td><a href='/cake/sample/boards/show/{$arr['Board']['id']}'>{$arr['Board']['title']}</a></td>";  echo "</tr>";}?></table><br /><a href="/cake/sample/">  <?php echo $this->RgbText->blueString('※トップに戻る'); ?></a>［リスト7-5］<?phpclass RgbTextHelper extends AppHelper {  public $helpers = array('Html');  public function __construct(View $view, $settings = array()) {    parent::__construct($view, $settings);    //debug($settings);  }  public function redString($str){    return $this->output("<span style=\"background-color:#FF0000;color:#FFFFFF\">$str</span>");  }  public function greenString($str){    return $this->output("<span style=\"background-color:#00FF00;color:#FFFFFF\">$str</span>");  }  public function blueString($str){    return $this->output("<span style=\"background-color:#0000FF;color:#FFFFFF\">$str</span>");  }  // ここから追加したもの  public function redLink($str,$url){    $style = "background-color:#FF0000; color:#FFFFFF";    return $this->output($this->Html->link($str,$url,array('style'=>$style)));  }  public function greenLink($str,$url){    $style = "background-color:#00FF00; color:#FFFFFF";    return $this->output($this->Html->link($str,$url,array('style'=>$style)));  }  public function blueLink($str,$url){    $style = "background-color:#0000FF; color:#FFFFFF";    return $this->output($this->Html->link($str,$url,array('style'=>$style)));  }}?>［リスト7-6］<h1><?php echo $this->RgbText->redString('掲示板'); ?></h1><br /><?php echo $this->RgbText->greenLink('※投稿する','/cake/sample/boards/add'); ?></a><br /><br /><table><tr><th>投稿者</th><th>タイトル</th></tr><?phpfor($i = 0;$i < count($data);$i++){  $arr = $data[$i];  echo "<tr>";  echo "<td><a href='/cake/sample/boards/show2/{$arr['Personal']['id']}'> {$arr['Personal']['name']}</a></td>";  echo "<td><a href='/cake/sample/boards/show/{$arr['Board']['id']}'> {$arr['Board']['title']}</a></td>";  echo "</tr>";}?></table><br /><?php echo $this->RgbText->blueLink('※トップに戻る',"/cake/sample/"); ?>［リスト7-7］<?php$imgTag = $this->Html->image('cake.power.gif', array('alt'=>'Cake.PHP','width'=>98,'height'=>13));$aTag = $this->Html->link($imgTag,'http://www.cakephp.org', array('target'=>'_blank','escape'=>false));echo $aTag;?>［リスト7-8］<?php echo $this->element('SampleBanner'); ?>［リスト7-9］<table><?phpecho "<tr>";foreach($titles as $title){  echo "<th>{$title[1]}</th>";}echo "</tr>";foreach($data as $arr){  echo "<tr>";  foreach($titles as $title){    echo "<td>{$arr[$title[0]][$title[1]]}</td>";  }  echo "</tr>";}?></table>［リスト7-10］<?php echo $this->element('DataTable',    array('titles'=>array(      array('Board','id'),      array('Personal','name'),      array('Board','title')))); ?>［リスト7-11］<?phpclass DataArrayComponent extends Component {  public $name = "DataArray";    public function getMergedArray($datas){    $arr = array();    for($i = 0;$i < count($datas);$i++){      $arr2 = array();      foreach($datas[$i] as $data){        $arr2 = array_merge($arr2,$data);      }      $arr[$i] = $arr2;    }    return $arr;  }  }?>［リスト7-12］public $components = array('DataArray');public function index(){  $data = $this->Board->find('all');  $this->set('marged',$this->DataArray->getMergedArray($data));}［リスト7-13］<table><tr>  <th>ユーザID</th>  <th>投稿者</th>  <th>コメント</th>  <th>タイトル</th>  <th>投稿内容</th></tr><?phpforeach($marged as $arr){  echo "<tr>";  echo "<td>{$arr['id']}</td>";  echo "<td><a href='/cake/sample/boards/show2/{$arr['id']}'> {$arr['name']}</a></td>";  echo "<td>{$arr['comment']}</td>";  echo "<td><a href='/cake/sample/boards/show/{$arr['id']}'> {$arr['title']}</a></td>";  echo "<td>{$arr['content']}</td>";  echo "</tr>";}?></table>［リスト7-14］<?phpclass DataArrayComponent extends Component {  public $name = "DataArray";  public $controllers;    public function startup(&$controller){    $this->controllers =& $controller;  }    public function getMergedArray($modelname){    $model = ClassRegistry::init($modelname);    $datas = $model->find('all');    $arr = array();    for($i = 0;$i < count($datas);$i++){      $arr2 = array();      foreach($datas[$i] as $data){        $arr2 = array_merge($arr2,$data);      }      $arr[$i] = $arr2;    }    $this->controllers->set('marged',$arr);  }  }?>［リスト7-15］public $components = array('DataArray');public function index(){  $this->DataArray->getMergedArray('Board');}［リスト7-16］<?phpclass SuperBoardBehavior extends ModelBehavior {  public function setup(Model $Model, $settings) {    // セットアップ処理  }  public function anyData(Model $model){    $count = $model->find('count');    $n = mt_rand(0,$count - 1);    $data = $model->find('first',array('offset'=>$n));    return $data;  }  }?>［リスト7-17］public $actsAs = array('SuperBoard');［リスト7-18］――BoardsControllerのindexメソッド修正public function index(){  $data = $this->Board->anyData();  $this->set("data",$data);}［リスト7-19］――index.ctp<pre><?php print_r($data); ?></pre>［リスト7-20］<?phpclass SuperBoardBehavior extends ModelBehavior {  public $mapMethods = array('/get(\w+)/' => 'getSomething');  public function setup(Model $Model, $settings) {    // セットアップ処理  }  public function anyData(Model $model){    ……略……  }    // 追加したマジックメソッド用のメソッド  public function getSomething(Model $model, $method, $arg) {    //debug(func_get_args());    $methodname = strtolower($method);    $field = substr ($method,3,strlen($method));    $data = null;    try {      $count= $model->find('count',array('conditions'=>array($field=>$arg)));      $n = mt_rand(0,$count - 1);      $data= $model->find('first',array('offset'=>$n, 'conditions'=>array($field=>$arg)));    } catch (Exception $e){};    return $data;  }}?>［リスト7-21］public function index(){  $data = $this->Board->getName("tuyano");  $this->set("data",$data);}［リスト7-22］CakePlugin::loadAll();［リスト7-23］CREATE TABLE `personal_datas` (  `id` int(11) NOT NULL auto_increment,  `username` varchar(255) NOT NULL,   `email` varchar(100),  `tel` varchar(50),  `address` varchar(255),  `comment` varchar(255),  PRIMARY KEY  (`id`),  UNIQUE KEY `name` (`username`)) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci［リスト7-24］――Controller/PersonalDataAppController.php<?phpclass PersonalDataAppController extends AppController{}?>［リスト7-25］――Model/PersonalDataAppModel.php<?phpclass PersonaldataAppModel extends AppModel {}?>［リスト7-26］――Controller/PersonalDatasController.php<?phpclass PersonalDatasController extends PersonalDataAppController {  public $name = 'PersonalDatas';  public $uses = array('PersonalData');  public $scaffold;}?>［リスト7-27］――Model/PersonalData.php<?phpclass Personaldata extends PersonalDataAppModel {  public $name = 'PersonalDatas';  public $validate = array(    'username' => array(      'rule' => 'notEmpty',      'message' => '名前は必ず入力してください。'    )  );}?>［リスト7-28］<?phpclass PersonalDataInfoComponent extends Component {  public $name = "PersonalDataInfo";    public function getByName($name){    $model = ClassRegistry::init("PersonalData");    $datas = $model->findByUsername($name);    return $datas;  }}?>［リスト7-29］public $components = array('DataArray','PersonalData.PersonalDataInfo');public function index(){  $datas = $this->Board->find('all');  $this->set("datas",$datas);  $owner = $this->PersonalDataInfo->getByName("tuyano"); // オーナー情報を得る  $this->set("owner",$owner);}［リスト7-30］OWNER: <?php echo $owner['PersonalData']['username']; ?><br/>EMAIL: <?php echo $owner['PersonalData']['email']; ?><br/>［リスト7-31］<?phpclass PersonalDataInfoHelper extends AppHelper {  public $helpers = array('Html');  public function __construct(View $view, $settings = array()) {    parent::__construct($view, $settings);    //debug($settings);  }  public function showPersonalDataInfo($data){    $result = '<table style="width:300px;font-size:9pt;">';    $result .= "<tr><th>OWNER:</th><td>" . $data["PersonalData"]["username"] . "</td></tr>";    $result .= "<tr><th>EMAIL:</th><td>" . $data["PersonalData"]["email"] . "</td></tr>";    $result .= "<tr><th>TEL:</th><td>" . $data["PersonalData"]["tel"] . "</td></tr>";    $result .= "<tr><th>ADDRESS:</th><td>" . $data["PersonalData"]["address"] . "</td></tr>";    $result .= "</table>";    return $this->output($result);  }  }?>［リスト7-32］public $helpers = array('PersonalData.PersonalDataInfo');［リスト7-33］<?php  echo $this->PersonalDataInfo->showPersonalDataInfo($owner); ?>［リスト7-34］<?phpclass ByNumberBehavior extends ModelBehavior {    public function setup(Model $Model, $settings) {    // セットアップ処理  }  public function getByNumber(Model $model,$n){    $data = $model->find('first',array('offset'=>$n));    return $data;  }  }?>［リスト7-35］――Personaldataに追加public $actsAs = array('PersonalData.ByNumber');［リスト7-36］――BoardsControllerpublic $uses = array('Board','Personal','PersonalData.Personaldata');  public function index(){  $datas = $this->Board->find('all');  $this->set("datas",$datas);  $n = $this->request->query['number'];  $data = $this->Personaldata->getByNumber($n);  $this->set("data",$data);}［リスト7-38］――index.ctpに追加<pre><?php print_r($data); ?></pre>